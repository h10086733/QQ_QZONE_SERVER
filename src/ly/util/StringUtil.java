package ly.util;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Random;
import java.util.Set;

import javax.crypto.KeyGenerator;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;


import com.gargoylesoftware.htmlunit.TextUtil;

public class StringUtil {

	public static boolean halfRate() {
		int radNum = StringUtil.getRandomNum(500);
		if (radNum % 2 == 0) {
			return true;
		}
		return false;
	}

	public static String[] genRandomSpecialArr() {
		String[] a1 = new String[] { "159", "", "" };
		String[] a2 = new String[] { "", "159", "" };
		String[] a3 = new String[] { "", "", "159" };
		String[][] arr = new String[][] { a1, a2, a3 };
		int pos = StringUtil.getRandomNum(3);
		return arr[pos];
	}

	public static String getRandomStr(String orignal, int num) {
		Random random = new Random();
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < num; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return sb.toString();
	}

	public static String getRandomWX1Addr() {
		String tag = StringUtil.getRandomNumStr(4);
		String address = "广丰一村2号204-"
				+ tag
				+ StringUtil.getRandomStrFromArr(new String[] { "", "单元", "室",
						"房间", "号" });
		return address;
	}

	public static String getRandomStore() {
		return StringUtil.getRandomStrFromArr(new String[] { "丽眼饰衣", "小鱼川菜馆",
				"巧巧婆川菜馆", "丽景轩", "老格蔸川菜", "巴蜀家宴", "桥南一品香苑", "福人居", "慕涵形象设计中心",
				"天地人烫染", "丝丝不凡理发店", "缓美理发店", "飞灵丝美发工作室", "纯色酒吧", "彼岸花酒吧",
				"拓尔家具", "恒荣家具", "蒂尔婚纱", "欧若拉婚纱馆", "新新娘婚纱摄影", "调百味熟食店",
				"天号刘熟食店", "百味邦熟食店", "文发快餐店", "利万家快餐店", "明之亮眼镜店", "康视眼镜店",
				"雅典娜眼镜店", "千峰眼镜店", "日目眼镜店", "酷炫饰品屋", "酷拉拉手工饰品", "小天使淘宝屋",
				"史莱克少儿服饰（童装屋）", "毛豆童装店", "品味咖啡店", "星期八咖啡厅", "SLV时尚鞋店",
				"香草物语化妆品", "雨儿化妆品店", "兰桂坊酒家" });
	}

	public static String getRandomWX2Addr() {
		String tag = StringUtil.getRandomNumStr(4);
		String address1 = "凤翔路，天一花园-"
				+ tag
				+ "号"
				+ StringUtil.getRandomStrFromArr(new String[] { "701", "801",
						"901", "702", "703", "802", "803", "705", "903", "904",
						"805" });
		String address2 = "天一中心小学" + StringUtil.getRandomNumStr(2) + "幢"
				+ getRandomNumStr(1) + "0" + getRandomNumStr(1);
		String address3 = "天一街," + StringUtil.getRandomNumStr(3) + "号";
		String address4 = "天一实验幼儿园" + StringUtil.getRandomNumStr(2) + "幢"
				+ getRandomNumStr(1) + "0" + getRandomNumStr(1);
		return StringUtil.getRandomStrFromArr(new String[] { address1,
				address2, address3, address4 });
	}

	public static String getRandomNT1Addr() {
		String tag = StringUtil.getRandomNumStr(4);
		String address = "虹桥新村216幢306-"
				+ tag
				+ StringUtil.getRandomStrFromArr(new String[] { "", "单元", "室",
						"房间", "号" });
		return address;
	}

	public static String getRandomNT2Addr() {
		String tag = StringUtil.getRandomNumStr(4);
		String address = "姚港路38号辉煌大厦5楼501-"
				+ tag
				+ StringUtil.getRandomStrFromArr(new String[] { "", "单元", "室",
						"房间", "号" });
		return address;
	}

	public static String getRandomNT3Addr() {
		String tag = StringUtil.getRandomNumStr(4);
		String address = "东市街2号楼306室-"
				+ tag
				+ StringUtil.getRandomStrFromArr(new String[] { "", "单元", "室",
						"房间", "号" });
		return address;
	}

	public static String getHaoAddr() {
		int hao = StringUtil.getRandomNum(300);
		int floor = 16 + StringUtil.getRandomNum(7);
		int door = 2 + StringUtil.getRandomNum(7);
		String randomAdd = hao + "号" + floor + "" + intToRegString(door, 2);
		// System.out.println(randomAdd);
		return randomAdd;
	}

	public static String getRandomShRealAddr() {
		String tag = StringUtil.getRandomNumStr(4);
		String address = StringUtil.getRandomStrFromArr(new String[] {
				"合庆镇庆利路425弄26幢79号801-", "合庆镇庆利路425弄26幢79号8楼1号门-",
				"庆利路425弄26栋79号8层01号-", "庆利路海湾星城425弄26栋79号8层01号-",
				"庆荣中路海湾新城425弄26栋79号8层01号-" })
				+ tag
				+ StringUtil.getRandomStrFromArr(new String[] { "", "单元", "室",
						"房间", "号" });
		// String address = StringUtil.getRandomStrFromArr(new
		// String[]{"合庆镇庆利路425弄26幢"+getHaoAddr(),"合庆镇庆利路425弄26幢"+getHaoAddr(),"合庆镇庆利路425弄26幢"+getHaoAddr(),"合庆镇庆利路425弄26幢"+getHaoAddr(),"合庆镇庆利路425弄26幢"+getHaoAddr(),"合庆镇庆利路425弄26幢"+getHaoAddr(),"合庆镇庆利路425弄26幢"+getHaoAddr(),"庆利路425弄26栋"+getHaoAddr(),"庆利路海湾星城425弄26栋"+getHaoAddr()});
		// +tag+StringUtil.getRandomStrFromArr(new
		// String[]{"","单元","室","房间","号"})
		return address;
	}

	public static String getRandomWXRealAddr1() {
		String tag = StringUtil.getRandomNumStr(4);
		String address = StringUtil
				.getRandomStrFromArr(new String[] { "广瑞路广丰一村2号" })
				+ tag
				+ StringUtil.getRandomStrFromArr(new String[] { "", "单元", "室",
						"房间", "号" });
		return address;
	}

	public static String getRandomWXNearAddr1() {
		String tag = StringUtil.getRandomNumStr(2);
		String tag1 = StringUtil.getRandomNumStr(3);
		String exa1 = "广丰一村5" + tag + "号" + tag1 + "L";
		String exa2 = "广丰一村6" + tag + "号" + tag1 + "L";
		String exa3 = "广丰二村7" + tag + "号" + tag1 + "L";
		String exa4 = "广瑞路丰泽园7" + tag + "号" + tag1 + "L";
		String exa5 = "广益景园7" + tag + "号" + tag1 + "L";
		String exa6 = "东城花园3" + tag + "号" + tag1 + "L";
		String exa7 = "广瑞路星晟花园3" + tag + "号" + tag1 + "L";
		String exa8 = "广丰新村" + getRandomStore();
		String exa9 = "丁村施巷1" + tag + "号L";
		String address = StringUtil.getRandomStrFromArr(new String[] { exa1,
				exa2, exa3, exa4, exa5, exa6, exa7, exa8, exa9 });
		
		String add1 = "广瑞路"+StringUtil.getRandomNum(800, 380)+"号L";
		String add2 = "新丁巷"+StringUtil.getRandomNum(100,900)+"号L";
		String add3 = "谢巷"+StringUtil.getRandomNum(100,900)+"号L";
		String add4 = "江南花苑"+StringUtil.getRandomNum(100,900)+"号"+StringUtil.getRandomNumStr(3)+"L";
		String add5 = "格林春天"+StringUtil.getRandomNum(100,900)+"号"+StringUtil.getRandomNumStr(3)+"L";
		String add6 = "东方瑞景"+StringUtil.getRandomNum(100,900)+"号"+StringUtil.getRandomNumStr(3)+"L";
		String add7 = "江南城"+StringUtil.getRandomNum(100,900)+"号"+StringUtil.getRandomNumStr(3)+"L";
		String add8 = "宝锡大厦"+StringUtil.getRandomNum(100,900)+"号"+StringUtil.getRandomNumStr(3)+"L";
		String addAddress =  StringUtil.getRandomStrFromArr(new String[] { add1,
				add2, add3, add4, add5, add6, add7, add8});
		
		return StringUtil.getRandomStrFromArr(new String[]{address,addAddress});
	}

	public static String getRandomWXRealAddr2() {
		String tag = StringUtil.getRandomNumStr(4);
		String address = StringUtil
				.getRandomStrFromArr(new String[] { "天一花园" })
				+ tag
				+ StringUtil.getRandomStrFromArr(new String[] { "", "单元", "室",
						"房间", "号" });
		return address;
	}

	public static String getRandomRoom() {
		String floor = StringUtil.getRandomNum(1, 13) + "";
		String room = StringUtil.getRandomNum(50) + "";
		if (room.length() == 1) {
			room = "0" + room;
		}
		return StringUtil.getRandomStrFromArr(new String[] {
				floor + room,
				floor + room + "室",
				floor
						+ StringUtil.getRandomStrFromArr(new String[] { "L",
								"层", "楼" }) });
	}

	public static String getRandomRoomNum() {
		String floor = StringUtil.getRandomNum(1, 13) + "";
		String room = StringUtil.getRandomNum(50) + "";
		if (room.length() == 1) {
			room = "0" + room;
		}
		return floor + room;
	}

	public static String getRandomHZJdAddr() {
		String road = StringUtil.getRandomStrFromArr(new String[] { "文海南路",
				"文淙南路", "文澜路", "云涛南路", "学林街", "学正街", "科技园路", "27号大街", "25号大街",
				"21号大街", "听涛路", "学府街", "12号大街", "16号大街", "24号大街", "17号大街" });
		String build = StringUtil.getRandomStrFromArr(new String[] { "下沙新城客运站",
				"浙江金融职业学院", "卫东饭店", "桃李苑", "浙江财经学院下沙校区", "成蹊苑", "浙江水利水电学院",
				"宝龙城市广场", "仁和社区", "新加坡杭州科技园", "东一咖啡", "中自科技园", "杭州下沙电子商务园",
				"新雁公寓", "新世纪专修学校", "海天农贸市场", "多蓝水岸", "野风海天城", "桑达公寓",
				"杭州歌江维嘉大酒店", "保利唐宁十号府", "朗诗国际", "梦琴湾", "云水苑幼儿园", "三花公寓",
				"杭州哈德森", "伊萨卡国际城", "世茂首府", "世茂小学", "世茂滨江花园", "保利东湾", "金隅观澜时代",
				"观澜国际时代花园", "保利玫瑰湾", "克雷登" });
		String address = road + StringUtil.getRandomNumStr(2) + "号" + build;
		return address;
	}

	public static String getRandomShJdAddr() {
		int nong = StringUtil.getRandomNum(1000) + 1;
		int hao = StringUtil.getRandomNum(1000) + 1;

		String tag = StringUtil.getRandomStrFromArr(new String[] { nong + "弄",
				"" })
				+ hao + "号";
		String tag2 = hao + "号";
		String road = StringUtil.getRandomStrFromArr(new String[] { "庆滨路",
				"环庆中路", "凌白公路", "庆利路", "向东中心路", "辉煌路", "联星支路", "友青路", "青四中心路",
				"", "", "", "", "", "" });
		// new String[]{"海湾新城","海馨苑","地纬家苑","永旭家苑","庆华花苑"}

		String address = null;
		if (StringUtil.isEmpty(road)) {
			address = StringUtil.getRandomStrFromArr(new String[] { "海湾新城",
					"海馨苑", "地纬家苑", "永旭家苑", "庆华花苑", "浦东新区民办利民小学", "友谊小区",
					"上海康奇印刷纸业公司", "林克司", "合庆农家乐", "浦东新区青山敬老院", "浦东民办利民小学",
					"上海高达机器有限公司" })
					+ tag + getRandomRoom();
		} else {
			String build = StringUtil.getRandomStrFromArr(new String[] {
					"康欣小区", "工大小区", "顺唐商务酒店", "华山幸福佳苑", "幸福小区", "光华小区", "新光小区",
					"延苑", "安康小区", "金康雅苑", "东尚", "东城小筑", "康杰医院", "湖景佳苑", "玫瑰坊",
					"北火巷小区", "东关小区", "东方星苑", "安仁坊安置小区", "金花公寓", "华夏大厦", "钻石星座",
					"和信小区", "亚通宾馆", "鼎盛国际公寓", "中电大厦", "家天下", "长乐壹号", "江海新城",
					"临海小区", "凌白新苑", "虹桥新村", "置海花苑", "长河大厦", "春泽园小区", "东旭花园",
					"都景苑", "东华金座", "福海小区", "东润枫景", "东方太阳城", "都市绿洲", "百合花苑",
					"光华小区", "人和明苑", "静怡家园", "海霞苑" });
			String address1 = road + build + tag + getRandomRoom();
			String address2 = road + nong + "弄" + build + tag2
					+ getRandomRoom();
			String address3 = road + nong + "弄" + tag2 + build
					+ getRandomRoom();
			address = StringUtil.getRandomStrFromArr(new String[] { address1,
					address2, address3 });
		}
		// String address = StringUtil.getRandomStrFromArr(new
		// String[]{"海湾新城","海馨苑","地纬家苑"})
		// + hao +"号"
		// +StringUtil.getRandomStrFromArr(new String[]{"康欣小区",
		// "工大小区","顺唐商务酒店","华山幸福佳苑","幸福小区","光华小区","新光小区","延苑","安康小区","金康雅苑","东尚"
		// ,"东城小筑","康杰医院","湖景佳苑","玫瑰坊","北火巷小区","东关小区","东方星苑","安仁坊安置小区","金花公寓","华夏大厦","钻石星座","和信小区","亚通宾馆","鼎盛国际公寓","中电大厦","家天下","长乐壹号","江海新城","临海小区","凌白新苑","虹桥新村","置海花苑","长河大厦","春泽园小区","东旭花园","都景苑","东华金座","福海小区","东润枫景","东方太阳城","都市绿洲","百合花苑","光华小区","人和明苑","静怡家园","海霞苑"})+StringUtil.getRandomNum(20)+"楼"+StringUtil.getRandomStr("ABCDEFGHIJKLMLOPQRSTUVWXYZ",1)+StringUtil.getRandomNum(200)+"单元"+StringUtil.getRandomNum(50)+StringUtil.getRandomStrFromArr(new
		// String[]{"号", "房间","厅"});//详细地址
		return address;
	}

	public static String getRandomBuilding() {
		String build = StringUtil.getRandomStrFromArr(new String[] { "康欣小区",
				"工大小区", "顺唐商务酒店", "华山幸福佳苑", "幸福小区", "光华小区", "新光小区", "延苑",
				"安康小区", "金康雅苑", "东尚", "东城小筑", "康杰医院", "湖景佳苑", "玫瑰坊", "北火巷小区",
				"东关小区", "东方星苑", "安仁坊安置小区", "金花公寓", "华夏大厦", "钻石星座", "和信小区",
				"亚通宾馆", "鼎盛国际公寓", "中电大厦", "家天下", "长乐壹号", "江海新城", "临海小区",
				"凌白新苑", "虹桥新村", "置海花苑", "长河大厦", "春泽园小区", "东旭花园", "都景苑", "东华金座",
				"福海小区", "东润枫景", "东方太阳城", "都市绿洲", "百合花苑", "光华小区", "人和明苑",
				"静怡家园", "海霞苑", "成蹊苑", "水利水电学院", "宝龙城市广场", "仁和社区", "科技园",
				"东一咖啡", "中自科技园", "电子商务园", "新雁公寓", "新世纪专修学校", "海天农贸市场", "多蓝水岸",
				"野风海天城", "桑达公寓", "保利唐宁十号府", "朗诗国际", "梦琴湾", "云水苑幼儿园", "三花公寓",
				"杭州哈德森", "伊萨卡国际城", "世茂首府", "世茂小学", "世茂滨江花园", "保利东湾", "金隅观澜时代",
				"观澜国际时代花园", "保利玫瑰湾", "克雷登" });
		return build;
	}

	public static String getRandomJSJdAddr() {
		int hao = StringUtil.getRandomNum(100) + 1;
		int dong = StringUtil.getRandomNum(100) + 1;

		String tag = StringUtil.getRandomStrFromArr(new String[] { hao + "号",
				"" });
		;
		String tag2 = dong + "幢";
		String road = StringUtil.getRandomStrFromArr(new String[] { "人民路",
				"市民广场", "", "", "", "", "", "", "", "", "" });

		String address = null;
		if (StringUtil.isEmpty(road)) {
			String tAddr1 = StringUtil.getRandomStrFromArr(new String[] {
					"佳乐花苑", "人民医院", "通州电视大学", "翰学院", "建校" })
					+ tag + tag2 + getRandomRoom();
			String tAddr2 = StringUtil.getRandomStrFromArr(new String[] {
					"北山宾馆", "七天连锁", "夜归人", "汉庭连锁" })
					+ getRandomRoom();
			address = StringUtil.getRandomStrFromArr(new String[] { tAddr1,
					tAddr2 });
		} else {
			String build = StringUtil.getRandomStrFromArr(new String[] {
					"中新楼大夏", "英俊名邸", "汇才技术学校分校", "临江里苑", "津源方科技公司",
					"强光电子高频设备厂", "巨星建材研发中心", "岳麓北城公寓", "米地亚家园", "兴贸盛世名座",
					"百灵花苑", "新南桥苑", "维丰南桥小区", "上芬东一新村", "雅北电子厂", "龙塘新村",
					"简上新村", "京基混凝土有限公司", "南园欣荔苑", "米兰公寓", "翡翠花苑", "华富苑",
					"友诚商务楼", "正阳小区", "康达隆公寓", "小小花世界幼儿园", "信德楼", "汇福庭苑",
					"新泉大夏", "源德里小区", "亚太力美学整形所" });
			String address1 = road + build + tag + getRandomRoom();
			String address2 = road + tag + tag2 + getRandomRoom();
			String address3 = road + tag + build + getRandomRoom();
			address = StringUtil.getRandomStrFromArr(new String[] { address1,
					address2, address3 });
		}
		// String address = StringUtil.getRandomStrFromArr(new
		// String[]{"海湾新城","海馨苑","地纬家苑"})
		// + hao +"号"
		// +StringUtil.getRandomStrFromArr(new String[]{"康欣小区",
		// "工大小区","顺唐商务酒店","华山幸福佳苑","幸福小区","光华小区","新光小区","延苑","安康小区","金康雅苑","东尚"
		// ,"东城小筑","康杰医院","湖景佳苑","玫瑰坊","北火巷小区","东关小区","东方星苑","安仁坊安置小区","金花公寓","华夏大厦","钻石星座","和信小区","亚通宾馆","鼎盛国际公寓","中电大厦","家天下","长乐壹号","江海新城","临海小区","凌白新苑","虹桥新村","置海花苑","长河大厦","春泽园小区","东旭花园","都景苑","东华金座","福海小区","东润枫景","东方太阳城","都市绿洲","百合花苑","光华小区","人和明苑","静怡家园","海霞苑"})+StringUtil.getRandomNum(20)+"楼"+StringUtil.getRandomStr("ABCDEFGHIJKLMLOPQRSTUVWXYZ",1)+StringUtil.getRandomNum(200)+"单元"+StringUtil.getRandomNum(50)+StringUtil.getRandomStrFromArr(new
		// String[]{"号", "房间","厅"});//详细地址
		return address;
	}

	public static String getRandomShNearAddr() {
		String tag = StringUtil.getRandomNumStr(4);
		String address = StringUtil.getRandomStrFromArr(new String[] {
				"合庆镇庆利路", "庆利路", "庆利路海湾星城", "环庆中路庆利路" })
				+ StringUtil.getRandomStrFromArr(new String[] { "425弄", "435弄",
						"445弄", "455弄", "465弄" })
				+ StringUtil.getRandomStrFromArr(new String[] { "江海新城", "临海小区",
						"凌白新苑", "虹桥新村", "置海花苑", "长河大厦", "春泽园小区", "东旭花园", "都景苑",
						"东华金座", "福海小区", "东润枫景", "东方太阳城", "都市绿洲", "百合花苑",
						"光华小区", "人和明苑", "静怡家园", "海霞苑" })
				+ getHaoAddr()
				+ StringUtil.getRandomStrFromArr(new String[] { "", "单元", "室",
						"房间", "号" });
		// String address = StringUtil.getRandomStrFromArr(new
		// String[]{"合庆镇庆利路425弄26幢"+getHaoAddr(),"合庆镇庆利路425弄26幢"+getHaoAddr(),"合庆镇庆利路425弄26幢"+getHaoAddr(),"合庆镇庆利路425弄26幢"+getHaoAddr(),"合庆镇庆利路425弄26幢"+getHaoAddr(),"合庆镇庆利路425弄26幢"+getHaoAddr(),"合庆镇庆利路425弄26幢"+getHaoAddr(),"庆利路425弄26栋"+getHaoAddr(),"庆利路海湾星城425弄26栋"+getHaoAddr()});
		// +tag+StringUtil.getRandomStrFromArr(new
		// String[]{"","单元","室","房间","号"})
		return address;
	}

	public static String getRandomShAddr() {
		String address = StringUtil.getRandomStrFromArr(new String[] { "汇庆路",
				"仁庆路" })
				+ StringUtil.getRandomNumStr(3)
				+ "弄"
				+ StringUtil.getRandomStrFromArr(new String[] { "江海新城", "临海小区",
						"凌白新苑", "虹桥新村", "置海花苑", "长河大厦", "春泽园小区", "东旭花园", "都景苑",
						"东华金座", "福海小区", "东润枫景", "东方太阳城", "都市绿洲", "百合花苑",
						"光华小区", "人和明苑", "静怡家园", "海霞苑" })
				+ getHaoAddr()
				+ StringUtil.getRandomStrFromArr(new String[] { "", "单元", "室",
						"房间", "号" });
		return address;
	}

	public static String getRandomShTpAddr() {
		String tag = StringUtil.getRandomNumStr(4);
		String address = StringUtil.getRandomStrFromArr(new String[] { "海门路",
				"东大名路", "保定路", "舟山路", "南丘路", "马厂路", "青浦路", "旅顺路", "闵行路", "武昌路",
				"商丘路", "东余杭路", "茂林路", "丹徒路", "公平路", "高阳路", "岳州路", "通州路", "飞虹路",
				"保定路", "瑞虹路", "天宝路", "天镇路", "虹关路", "东沙虹港路", "辽宁路", "沙泾路",
				"哈尔滨路", "海伦路", "天水路", "三河路" })
				+ tag + "号";
		return address;
	}

	public static String getRandomRoad(){
		String address = StringUtil.getRandomStrFromArr(new String[]{"海门路",
				"东大名路", "保定路", "舟山路", "南丘路", "马厂路", "青浦路", "旅顺路", "闵行路", "武昌路",
				"商丘路", "东余杭路", "茂林路", "丹徒路", "公平路", "高阳路", "岳州路", "通州路", "飞虹路",
				"保定路", "瑞虹路", "天宝路", "天镇路", "虹关路", "东沙虹港路", "辽宁路", "沙泾路",
				"哈尔滨路", "海伦路", "天水路", "三河路","建设五路","建设六路","十三街","和平大","工业三路","工业二路","东一路","洪山路","水果湖横路","水果湖路","市政南路","24街","建一南路","二十四街","20街","东湖路","冶金一街","市政侧路","沿港路","红钢四街","冶金大","友谊大","115街","114街","中北路","黄鹂路","东冶路","东湖西路","洪山侧路","工业一路","三十一街","八一路","民主路","鄂州街","21街","三十五街","工业大","建设三路","吉林街","任家路","46街","建设四路","本溪街","41街","本溪南街","建二北路","49街","三弓路","建设一路","建设路","祥丰路","建一路","建设二路","38街","119街","建二南路","118街","117街","辽宁街","120街","121街","园林路","62街","园林南路","联盟路","东三路","东四路"});
		return address;
	}
	
	public static String getRandomShAddr2() {
		String tag = StringUtil.getRandomNumStr(4);
		String address = StringUtil.getRandomStrFromArr(new String[] {
				"东方路971号钱江大厦26楼-", "东方路971号钱江大厦26L-", "东方路971号钱江大厦26F-",
				"东方路971号钱江大楼26F-", "东方路971号(接近浦电路)钱江大厦26楼-" })
				+ tag
				+ StringUtil.getRandomStrFromArr(new String[] { "", "单元", "室",
						"房间", "号" });
		return address;
	}

	public static String getRandomShAddr3() {
		String tag0 = StringUtil.getRandomNumStr(2);
		String tag = StringUtil.getRandomNumStr(4);

		String address = StringUtil.getRandomStrFromArr(new String[] {
				"大统路"
						+ StringUtil.getRandomNum(1, 190)
						+ "号"
						+ StringUtil.getRandomStrFromArr(new String[] { "华力",
								"上方教育", "永昌外贸" }) + "公司" + tag0 + "生活区" + tag
						+ "栋",
				"梅园路"
						+ StringUtil.getRandomNum(1, 225)
						+ "号"
						+ StringUtil.getRandomStrFromArr(new String[] { "汉捷",
								"舒佳", "上好休" }) + "酒店"
						+ StringUtil.getRandomNum(1, 22) + "F",
				"光复路"
						+ StringUtil.getRandomNum(270, 300)
						+ "号"
						+ tag0
						+ "弄"
						+ StringUtil.getRandomStrFromArr(new String[] { "华强电子",
								"尹伟达", "华伟服饰", "上海方泰金属制造" }) + "工厂" + tag0
						+ "栋" });
		return address;
	}

	public static int[] ip_first = new int[] { 58, 59, 125, 202, 117, 118, 218,
			211, 220, 123, 219 };
	// public static int[] ip_first = new
	// int[]{116,79,117,78,114,77,115,112,113,110,111,195,197,190,37,118,193,192,119,198,199,42,41,82,83,80,84,85,125,202,203,204,121,122,123,200,201,124,207,27,208,163,1,120,72,211,212,210,58,216,213,219,178,217,177,176,218,14,175,109,107,106,62,103,60,61,101,220,221,145,222,95,223,147,94,93,92,91,188,187,189,180,181,182,183,185,186,88};
	public static int[] ip_second = new int[] { 159, 33, 158, 39, 37, 38, 154,
			153, 150, 151, 42, 202, 203, 204, 200, 201, 22, 23, 169, 24, 25,
			26, 165, 207, 168, 208, 28, 29, 167, 209, 161, 3, 2, 162, 163, 1,
			0, 30, 7, 5, 31, 4, 8, 211, 210, 219, 179, 17, 18, 217, 218, 176,
			13, 14, 11, 12, 171, 20, 174, 175, 172, 108, 173, 107, 104, 102,
			99, 101, 100, 220, 98, 221, 97, 222, 96, 223, 93, 226, 92, 91, 227,
			188, 90, 228, 189, 180, 181, 10, 183, 184, 89, 116, 114, 78, 115,
			77, 112, 241, 113, 110, 111, 195, 194, 197, 196, 191, 190, 192,
			119, 198, 199, 83, 80, 243, 81, 242, 86, 248, 87, 84, 85, 66, 127,
			69, 128, 68, 121, 122, 123, 230, 124, 129, 71, 120, 233, 236, 74,
			235, 238, 75, 76, 237, 134, 135, 132, 133, 59, 138, 139, 57, 56,
			136, 55, 64, 62, 63, 60, 130, 61, 49, 143, 48, 250, 251, 145, 146,
			252, 147, 148, 44, 149, 46, 51, 52, 53, 142, 255, 141 };

	public static String getRandomIp() {
		int firstIp = StringUtil.getRandomNumFromArr(ip_first);
		int secondIp = StringUtil.getRandomNumFromArr(ip_second);
		int third = getRandomNum(254);
		int four = getRandomNum(254);
		return firstIp + "." + secondIp + "." + third + "." + four;
	}

	public static String getRandomEmailStr() {
		String result = "";
		Random random = new Random();
		int t = random.nextInt(8);
		if (t == 0) {
			result = "@163.com";
		} else if (t == 1) {
			result = "@sina.com";
		} else if (t == 2) {
			result = "@sohu.com";
		} else if (t == 3) {
			result = "@263.com";
		} else if (t == 4) {
			result = "@msn.com";
		} else if (t == 5) {
			result = "@hotmail.com";
		} else if (t == 6) {
			result = "@gmail.com";
		} else if (t == 7) {
			result = "@169.com";
		}
		return result;
	}

	/**
	 * 在源字符串中截取两个字符串之间的字符串（都不包含）,第一次出现的首字符串及紧跟着首字符串出现的尾字符串。
	 * 
	 * @param originalStr
	 * @param innerBegin
	 * @param innerEnd
	 * @return
	 */

	public static Properties firstnames = null;
	public static Properties secondnames = null;
	public static Properties allAddress = null;

	public static String getRealName() {
		String firstname = StringUtil.getRandomKeyFromProps(firstnames);
		String secondname = StringUtil.getRandomKeyFromProps(secondnames);
		if (StringUtil.isEmpty(firstname) || StringUtil.isEmpty(secondname)) {
			return getRandomName();
		} else {
			return firstname + secondname;
		}
	}

	public static String getZjName() {
		String name = getRandomSimpleName();
		if (name.length() == 2) {
			name = name.substring(0, 1) + "阳";
		} else {
			int rad = StringUtil.getRandomNum(1, 2);
			name = name.replaceAll(name.substring(rad, rad + 1), "阳");
		}
		return name;
	}

	public static String getRandomSimpleName() {
		String firstName = "应 黄 丁 任 张 王 叶 钱 倪 陈 周 白 冯 成 凌 朱 沈 吴 姚 熊 陶 余 靳 董 颜 郑 唐 惠 蔡 李 万 卢 祝 曹 马 厉 费 俞 施 郭 胡 陆 谢 林 范 顾 庄 方 侯 赵 杨 韩 斯 巩 呼 徐 占 詹 金 雷 于 邹 邵 舒 吕 郎 须 孙 竹 虞 严 戚 奕 苏 高 干 姜 何 袁 潘 蒋 梅 章 傅 杜 夏 葛 求 邱 鲁 汪 童 阮 盛 郁 瞿 崔 宣 刘 诸 戴 鹿 边 蓝 薛 贾 柯 庞 曾 许 毛 齐 相 程 邓 彭 褚 谈 罗 孔 史 缪 路 梁 郝 柴 鲍 石 龙 谭 单 洪";
		String[] firstNames = firstName.split(" ");
		String girls = "素林、立、彤鑫、豪杰、明杰、宇柯、聪、江天、明、剑、佳、亮、晶月、石磊、增文、程远、光烈、佳佳、仕强、旻、超杰、一豪、敬新、一鑫、国华、力伟、东贵、新宇、於佳、丝琪、京津、良根、鸿宇、奎、晓怡、旭朝、志挺、科吉、涛、笛、孙塔、超、旻华、敏、博宇、天波、佳叶、志威、鲸椋、群、强、有淼、文才、高松、驰、一棵、佳洁、冬冬、窕、键、国鑫、哲远、立科、振华、皓宇、彦廷、江坚、立栋、华钢、元斌、凌、淑洁、磊、朱峰、学斌、尤彬、梦倩、雨露、鹏、柏村、再城、金涌、研、淑敏、轲鑫、康、志豪、锦、伟波、周锋、川辉、垲、彬彬、迪、佳磊、恩赐、一飞、梦晓、光浩、杰友、俊、勇、杨、贝、臣、文强、伟旭、缘、佳民、晓彤、铭钊、海康、少波、佳辉、昀迪、培杰、广赞、建聪、波、冬青、剑剑、陈豪、岸荣、剑涛、可泽、棚程、建波、秋东、熠磊、塘皓、向杰、志浩、欣航、培、旌博、洪涛、宇杰、桦樑、海成、健幸、嘉瑶、扬舟、佐豪、帅、嘉依、鑫涛、豪阳、中东、书彝、文浩、志、佳玮、文秀、洁、忆一、林、志强、枕枕、雨婷、耀添、煜、栋、懿、大权、安南、盛禾、继浩、晨昊、俊宏、钧程、旭腾、之程、秀、林飞、江航、靖康、贵杭、晓满、顺舟、植行、飞、永飞、津帅、建、兴淼、家豪、烨烽、畅、伟、传波、顺达、裕晖、宇、一波、君鑫、浩盛、海锜、睿、小康、立军、航舰、琰、汪伟、钞钞、敏超、碧霞、煜韬、琛、炯、帅科、圣杰、华锋、超毅、朝锋、泽冠、怡杰、海亮、洋、雄、翔、快、天津、佳凯、赵凯、佳宏、宝送、炳林、凌磊、振宇、嘉伦、旭鹏、杨朋、乐中、革、样样、凌峰、文洲、小豪、杰、吉强、远航、露涛、群超、子超、浩杰、路路、昱旸、良斌、品、宇佳、颢、佳斌、恩泽、鑫超、佳其、葛敏、秉铠、宏宇、亚昱、迪锋、飞佳、斌、康宁、怡鹏、晓东、李佳、威、林玉、皓焜、天煌、震宇、若翔、德杰、温秀、绪谊、天风、旭奔、建城、盛文、邦国、宇超、梦婷、翔飞、叶凯、峰、佳男、盛、云杰、丹钧、锦鹏、宏坤、旭波、博、伯通、丙千、利成、翰繁、林康、威杰、永超、小强、鑫磊、添豪、孝崇、泽飞、振捷、林波、文超、晴、博文、博晰、旭东、以奈、铭浪、毅俊、一凡、长琦、志波、高民、逸潇、俊华、家鑫、友发、丹洋、大钦、哲锋、春晓、理或、耀光、凯程、鑫、准、祖洲、堡琰、东升、望望、炜、茂镯、俊康、彬、伟军、雯雯、蓉、程锦、帆帆、春雷、慧婷、晨昭、青云、子豪、寒鑫、再钢、力成、炀、晨航、海斌、万表、泽斌、金波、姝、帆、贝贝、珍珍、震、思园、李锋、赟昀、天益、邵杭、煜威、瑞乐、邱伟、世超、莉青、晗杰、中源、佳锋、光耀、绍星、国成、江波、宇伟、晓杰、杨均、鹏宇、晨林、炯豪、昇、鹏辉、孟蕾、寒冰、育仁、露伟、振辉、浙波、荣、辉辉、忠和、志财、梦萍、京华、无忌、文韩、韩韩、君武、余敏、烨锴、景伟、捷、诗文、明函、国庆、祥、倩文、柯、家浩、宗场、利锋、步绩、云峰、科奇、烨男、纯祥、铭昊、凤涛、剑伟、阳、天汉、项光、飞龙、洁燏、颖杰、勤晖、余峰、向东、健浩、怡晨、刘洋、明阳、红丰、学志、里、佳、天硕、琦、闯、叶宁、鸿翔、钊、凌健、攀、国龙、辉、仁勇、鹏飞、德阳";
		String[] girlNames = girls.split("、");
		String name = getRandomStrFromArr(firstNames)
				+ getRandomStrFromArr(girlNames);
		return name;
	}

	public static String getRandomName() {
		String firstName = "赵 钱 孙 李 周 吴 郑 王 冯 陈 褚 卫 蒋 沈 韩 杨 朱 秦 尤 许 何 吕 施 张 孔 曹 严 华 金 魏 陶 姜 戚 谢 邹 喻 柏 水 窦 章 云 苏 潘 葛 奚 范 彭 郎 鲁 韦 昌 马 苗 凤 花 方 俞 任 袁 柳 酆 鲍 史 唐 费 廉 岑 薛 雷 贺 倪 汤 滕 殷 罗 毕 郝 邬 安 常 乐 于 时 傅 皮 卞 齐 康 伍 余 元 卜 顾 孟 平 黄 和 穆 萧 尹 姚 邵 湛 汪 祁 毛 禹 狄 米 贝 明 臧 计 伏 成 戴 谈 宋 茅 庞 熊 纪 舒 屈 项 祝 董 梁 杜 阮 蓝 闵 席 季 麻 强 贾 路 娄 危 江 童 颜 郭 梅 盛 林 刁 锺 徐 邱 骆 高 夏 蔡 田 樊 胡 凌 霍 虞 万 支 柯 昝 管 卢 莫 经 房 裘 缪 干 解 应 宗 丁 宣 贲 邓 郁 单 杭 洪 包 诸 左 石 崔 吉 钮 龚 程 嵇 邢 滑 裴 陆 荣 翁 荀 羊 於 惠 甄 麴 家 封 芮 羿 储 靳 汲 邴 糜 松 井 段 富 巫 乌 焦 巴 弓 牧 隗 山 谷 车 侯 宓 蓬 全 郗 班 仰 秋 仲 伊 宫 宁 仇 栾 暴 甘 钭 历 戎 祖 武 符 刘 景 詹 束 龙 叶 幸 司 韶 郜 黎 蓟 溥 印 宿 白 怀 蒲 邰 从 鄂 索 咸 籍 赖 卓 蔺 屠 蒙 池 乔 阳 郁 胥 能 苍 双 闻 莘 党 翟 谭 贡 劳 逄 姬 申 扶 堵 冉 宰 郦 雍 却 璩 桑 桂 濮 牛 寿 通 边 扈 燕 冀 僪 浦 尚 农 温 别 庄 晏 柴 瞿 阎 充 慕 连 茹 习 宦 艾 鱼 容 向 古 易 慎 戈 廖 庾 终 暨 居 衡 步 都 耿 满 弘 匡 国 文 寇 广 禄 阙 东 欧 殳 沃 利 蔚 越 夔 隆 师 巩 厍 聂 晁 勾 敖 融 冷 訾 辛 阚 那 简 饶 空 曾 毋 沙 乜 养 鞠 须 丰 巢 关 蒯 相 查 后 荆 红 游 竺 权 逮 盍 益 桓 公";
		String[] firstNames = firstName.split(" ");
		String girls = "梦琪、之桃、慕青、尔岚、初夏、沛菡、傲珊、曼文、乐菱、惜文、香寒、新柔、语蓉、海安、夜蓉、涵柏、水桃、醉蓝、语琴、从彤、傲晴、语兰、又菱、碧彤、元霜、怜梦、紫寒、妙彤、曼易、南莲、紫翠、雨寒、易烟、如萱、若南、寻真、晓亦、向珊、慕灵、以蕊、映易、雪柳、海云、凝天、沛珊、寒云、冰旋、宛儿、绿真、晓霜、碧凡、夏菡、曼香、若烟、半梦、雅绿、冰蓝、灵槐、平安、书翠、翠风、代云、梦曼、幼翠、听寒、梦柏、醉易、访旋、亦玉、凌萱、访卉、怀亦、笑蓝、靖柏、夜蕾、冰夏、梦松、书雪、乐枫、念薇、靖雁、从寒、觅波、静曼、凡旋、以亦、念露、芷蕾、千兰、新波、代真、新蕾、雁玉、冷卉、紫山、千琴、傲芙、盼山、怀蝶、冰兰、山柏、翠萱、问旋、白易、问筠、如霜、半芹、丹珍、冰彤、亦寒、之瑶、冰露、尔珍、谷雪、乐萱、涵菡、海莲、傲蕾、青槐、易梦、惜雪、宛海、之柔、夏青、亦瑶、妙菡、紫蓝、幻柏、元风、冰枫、访蕊、芷蕊、凡蕾、凡柔、安蕾、天荷、含玉、书兰、雅琴、书瑶、从安、夏槐、念芹、代曼、幻珊、谷丝、秋翠、白晴、海露、代荷、含玉、书蕾、听白、灵雁、雪青、乐瑶、含烟、涵双、平蝶、雅蕊、傲之、灵薇、含蕾、从梦、从蓉、初丹、听兰、听蓉、语芙、夏彤、凌瑶、忆翠、幻灵、怜菡、紫南、依珊、妙竹、访烟、怜蕾、映寒、友绿、冰萍、惜霜、凌香、芷蕾、雁卉、迎梦、元柏、代萱、紫真、千青、凌寒、紫安、寒安、怀蕊、秋荷、涵雁、以山、凡梅、盼曼、翠彤、谷冬、冷安、千萍、冰烟、雅阳、友绿、南松、诗云、飞风、寄灵、书芹、幼蓉、以蓝、笑寒、忆寒、秋烟、芷巧、水香、映之、醉波、幻莲、夜山、芷卉、向彤、小玉、幼南、凡梦、尔曼、念波、迎松、青寒、笑天、涵蕾、碧菡、映秋、盼烟、忆山、以寒、寒香、小凡、代亦、梦露、映波、友蕊、寄凡、怜蕾、雁枫、水绿、曼荷、笑珊、寒珊、谷南、慕儿、夏岚、友儿、小萱、紫青、妙菱、冬寒、曼柔、语蝶、青筠、夜安、觅海、问安、晓槐、雅山、访云、翠容、寒凡、晓绿、以菱、冬云、含玉、访枫、含卉、夜白、冷安、灵竹、醉薇、元珊、幻波、盼夏、元瑶、迎曼、水云、访琴、谷波、笑白、妙海、紫霜、凌旋、孤丝、怜寒、凡松、青丝、翠安、如天、凌雪、绮菱、代云、香薇、冬灵、凌珍、沛文、紫槐、幻柏、采文、雪旋、盼海、映梦、安雁、映容、凝阳、访风、天亦、觅风、小霜、雪萍、半雪、山柳、谷雪、靖易、白薇、梦菡、飞绿、如波、又晴、友易、香菱、冬亦、问雁、海冬、秋灵、凝芙、念烟、白山、从灵、尔芙、迎蓉、念寒、翠绿、翠芙、靖儿、妙柏、千凝、小珍、妙旋、雪枫、夏菡、绮琴、雨双、听枫、觅荷、凡之、晓凡、雅彤、孤风、从安、绮彤、之玉、雨珍、幻丝、代梅、青亦、元菱、海瑶、飞槐、听露、梦岚、幻竹、谷云、忆霜、水瑶、慕晴、秋双、雨真、觅珍、丹雪、元枫、思天、如松、妙晴、谷秋、妙松、晓夏、宛筠、碧琴、盼兰、小夏、安容、青曼、千儿、寻双、涵瑶、冷梅、秋柔、思菱、醉波、醉柳、以寒、迎夏、向雪、以丹、依凝、如柏、雁菱、凝竹、宛白、初柔、南蕾、书萱、梦槐、南琴、绿海、沛儿、晓瑶、凝蝶、紫雪、念双、念真、曼寒、凡霜、飞雪、雪兰、雅霜、从蓉、冷雪、靖巧、翠丝、觅翠、凡白、乐蓉、迎波、丹烟、梦旋、书双、念桃、夜天、安筠、觅柔、初南、秋蝶、千易、安露、诗蕊、山雁、友菱、香露、晓兰、白卉、语山、冷珍、秋翠、夏柳、如之、忆南、书易、翠桃、寄瑶、如曼、问柳、幻桃、又菡、醉蝶、亦绿、诗珊、听芹、新之、易巧、念云、晓灵、静枫、夏蓉、如南、幼丝、秋白、冰安、秋白、南风、醉山、初彤、凝海、紫文、凌晴、雅琴、傲安、傲之、初蝶、代芹、诗霜、碧灵、诗柳、夏柳、采白、慕梅、乐安、冬菱、紫安、宛凝、雨雪、易真、安荷、静竹、代柔、丹秋、绮梅、依白、凝荷、幼珊、忆彤、凌青、之桃、芷荷、听荷、代玉、念珍、梦菲、夜春、千秋、白秋、谷菱、飞松、初瑶、惜灵、梦易、新瑶、曼梅、碧曼、友瑶、雨兰、夜柳、芷珍、含芙、夜云、依萱、凝雁、以莲、安南、幼晴、尔琴、飞阳、白凡、沛萍、雪瑶、向卉、采文、乐珍、寒荷、觅双、白桃、安卉、迎曼、盼雁、乐松、涵山、问枫、以柳、含海、翠曼、忆梅、涵柳、海蓝、晓曼、代珊、忆丹、静芙、绮兰、梦安、紫丝、千雁、凝珍、香萱、梦容、冷雁、飞柏、天真、翠琴、寄真、秋荷、代珊、初雪、雅柏、怜容、如风、南露、紫易、冰凡、海雪、语蓉、碧玉、语风、凝梦、从雪、白枫、傲云、白梅、念露、慕凝、雅柔、盼柳、半青、从霜、怀柔、怜晴、夜蓉、代双、以南、若菱、芷文、南晴、梦寒、初翠、灵波、问夏、惜海、亦旋、沛芹、幼萱、白凝、初露、迎海、绮玉、凌香、寻芹、秋柳、尔白、映真、含雁、寒松、寻雪、青烟、问蕊、灵阳、雪巧、丹萱、凡双、孤萍、紫菱、寻凝、傲柏、傲儿、友容、灵枫、尔丝、曼凝、若蕊、问丝、思枫、水卉、问梅、念寒、诗双、翠霜、夜香、寒蕾、凡阳、冷玉、平彤、语薇、幻珊、紫夏、凌波、芷蝶、丹南、之双、凡波、思雁、白莲、从菡、如容、采柳、沛岚、惜儿、夜玉、水儿、半凡、语海、听莲、幻枫、念柏、冰珍、思山、凝蕊、天玉、思萱、向梦、笑南、夏旋、之槐、元灵、以彤、采萱、巧曼、绿兰、平蓝、问萍、绿蓉、靖柏、迎蕾、碧曼、思卉、白柏、妙菡、怜阳、雨柏、雁菡、梦之、又莲、乐荷、寒天、凝琴、书南、映天、白梦、初瑶、平露、含巧、慕蕊、半莲、醉卉、天菱、青雪、雅旋、巧荷、飞丹、若灵、尔云、幻天、诗兰、青梦、海菡、灵槐、忆秋、寒凝、凝芙、绮山、静白、尔蓉、尔冬、映萱、白筠、冰双、访彤、绿柏、夏云、笑翠、晓灵、含双、盼波、以云、怜翠、雁风、之卉、平松、问儿、绿柳、如蓉、曼容、天晴、丹琴、惜天、寻琴、依瑶、涵易、忆灵、从波、依柔、问兰、山晴、怜珊、之云、飞双、傲白、沛春、雨南、梦之、笑阳、代容、友琴、雁梅、友桃、从露、语柔、傲玉、觅夏、晓蓝、新晴、雨莲、凝旋、绿旋、幻香、觅双、冷亦、忆雪、友卉、幻翠、靖柔、寻菱、丹翠、安阳、雅寒、惜筠、尔安、雁易、飞瑶、夏兰、沛蓝、静丹、山芙、笑晴、新烟、笑旋、雁兰、凌翠、秋莲、书桃、傲松、语儿、映菡、初曼、听云、初夏、雅香、语雪、初珍、白安、冰薇、诗槐、冷玉、冰巧、之槐、夏寒、诗筠、新梅、白曼、安波、从阳、含桃、曼卉、笑萍、晓露、寻菡、沛白、平灵、水彤、安彤、涵易、乐巧、依风、紫南、亦丝、易蓉、紫萍、惜萱、诗蕾、寻绿、诗双、寻云、孤丹、谷蓝、山灵、幻丝、友梅、从云、雁丝、盼旋、幼旋、尔蓝、沛山、代丝、觅松、冰香、依玉、冰之、妙梦、以冬、曼青、冷菱、雪曼、安白、千亦、凌蝶、又夏、南烟、靖易、沛凝、翠梅、书文、雪卉、乐儿、傲丝、安青、初蝶、寄灵、惜寒、雨竹、冬莲、绮南、翠柏、平凡、亦玉、孤兰、秋珊、新筠、半芹、夏瑶、念文、晓丝、涵蕾、雁凡、谷兰、灵凡、凝云、曼云、丹彤、南霜、夜梦、从筠、雁芙、语蝶、依波、晓旋、念之、盼芙、曼安、采珊、初柳、迎天、曼安、南珍、妙芙、语柳、含莲、晓筠、夏山、尔容、念梦、傲南、问薇、雨灵、凝安、冰海、初珍、宛菡、冬卉、盼晴、冷荷、寄翠、幻梅、如凡、语梦、易梦、千柔、向露、梦玉、傲霜、依霜、灵松、诗桃、书蝶、冰蝶、山槐、以晴、友易、梦桃、香菱、孤云、水蓉、雅容、飞烟、雁荷、代芙、醉易、夏烟、依秋、依波、紫萱、涵易、忆之、幻巧、水风、安寒、白亦、怜雪、听南、念蕾、梦竹、千凡、寄琴、采波、元冬、思菱、平卉、笑柳、雪卉、谷梦、绿蝶、飞荷、平安、孤晴、芷荷、曼冬、尔槐、以旋、绿蕊、初夏、依丝、怜南、千山、雨安、水风、寄柔、幼枫、凡桃、新儿、夏波、雨琴、静槐、元槐、映阳、飞薇、小凝、映寒、傲菡、谷蕊、笑槐、飞兰、笑卉、迎荷、元冬、书竹、半烟、绮波、小之、觅露、夜雪、寒梦、尔风、白梅、雨旋、芷珊、山彤、尔柳、沛柔、灵萱、沛凝、白容、乐蓉、映安、依云、映冬、凡雁、梦秋、醉柳、梦凡、若云、元容、怀蕾、灵寒、天薇、白风、访波、亦凝、易绿、夜南、曼凡、亦巧、青易、冰真、白萱、友安、诗翠、雪珍、海之、小蕊、又琴、香彤、语梦、惜蕊、迎彤、沛白、雁山、易蓉、雪晴、诗珊、冰绿、半梅、笑容、沛凝、念瑶、如冬、向真、从蓉、亦云、向雁、尔蝶、冬易、丹亦、夏山、醉香、盼夏、孤菱、安莲、问凝、冬萱、晓山、雁蓉、梦蕊、山菡、南莲、飞双、凝丝、思萱、怀梦、雨梅、冷霜、向松、迎丝、迎梅、听双、山蝶、夜梅、醉冬、雨筠、平文、青文、半蕾、幼菱、寻梅、含之、香之、含蕊、亦玉、靖荷、碧萱、寒云、向南、书雁、怀薇、思菱、忆文、若山、向秋、凡白、绮烟、从蕾、天曼、又亦、依琴、曼彤、沛槐、又槐、元绿、安珊、夏之、易槐、宛亦、白翠、丹云、问寒、易文、傲易、青旋、思真、妙之、半双、若翠、初兰、怀曼、惜萍、初之、宛丝、幻儿、千风、天蓉、雅青、寄文、代天、惜珊、向薇、冬灵、惜芹、凌青、谷芹、雁桃、映雁、书兰、寄风、访烟、绮晴、傲柔、寄容、以珊、紫雪、芷容、书琴、寻桃、涵阳、怀寒、易云、采蓝、代秋、惜梦、尔烟、谷槐、怀莲、涵菱、水蓝、访冬、半兰、又柔、冬卉、安双、冰岚、香薇、语芹、静珊、幻露、访天、静柏、凌丝、小翠、雁卉、访文、凌文、芷云、思柔、巧凡、慕山、依云、千柳、从凝、安梦、香旋、映天、安柏、平萱、以筠、忆曼、新竹、绮露、觅儿、碧蓉、白竹、飞兰、曼雁、雁露、凝冬、含灵、初阳、海秋、冰双、绿兰、盼易、思松、梦山、友灵、绿竹、灵安、凌柏、秋柔、又蓝、尔竹、天蓝、青枫、问芙、语海、灵珊、凝丹、小蕾、迎夏、水之、飞珍、冰夏、亦竹、飞莲、海白、元蝶、芷天、怀绿、尔容、元芹、若云、寒烟、听筠、采梦、凝莲、元彤、觅山、代桃、冷之、盼秋、秋寒、慕蕊、海亦、初晴、巧蕊、听安、芷雪、以松、梦槐、寒梅、香岚、寄柔、映冬、孤容、晓蕾、安萱、听枫、夜绿、雪莲、从丹、碧蓉、绮琴、雨文、幼荷、青柏、初蓝、忆安、盼晴、寻冬、雪珊、梦寒、迎南、如彤、采枫、若雁、翠阳、沛容、幻翠、山兰、芷波、雪瑶、寄云、慕卉、冷松、涵梅、书白、乐天、雁卉、宛秋、傲旋、新之、凡儿、夏真、静枫、乐双、白玉、问玉、寄松、丹蝶、元瑶、冰蝶、访曼、代灵、芷烟、白易、尔阳、怜烟、平卉、丹寒、访梦、绿凝、冰菱、语蕊、思烟、忆枫、映菱、凌兰、曼岚、若枫、傲薇、凡灵、乐蕊、秋灵、谷槐、觅云";
		String[] girlNames = girls.split("、");
		String name = getRandomStrFromArr(firstNames)
				+ getRandomStrFromArr(girlNames);
		return name;
	}

	public static String getRandomFirstName() {
		String firstName = "赵 钱 孙 李 周 吴 郑 王 冯 陈 褚 卫 蒋 沈 韩 杨 朱 秦 尤 许 何 吕 施 张 孔 曹 严 华 金 魏 陶 姜 戚 谢 邹 喻 柏 水 窦 章 云 苏 潘 葛 奚 范 彭 郎 鲁 韦 昌 马 苗 凤 花 方 俞 任 袁 柳 酆 鲍 史 唐 费 廉 岑 薛 雷 贺 倪 汤 滕 殷 罗 毕 郝 邬 安 常 乐 于 时 傅 皮 卞 齐 康 伍 余 元 卜 顾 孟 平 黄 和 穆 萧 尹 姚 邵 湛 汪 祁 毛 禹 狄 米 贝 明 臧 计 伏 成 戴 谈 宋 茅 庞 熊 纪 舒 屈 项 祝 董 梁 杜 阮 蓝 闵 席 季 麻 强 贾 路 娄 危 江 童 颜 郭 梅 盛 林 刁 锺 徐 邱 骆 高 夏 蔡 田 樊 胡 凌 霍 虞 万 支 柯 昝 管 卢 莫 经 房 裘 缪 干 解 应 宗 丁 宣 贲 邓 郁 单 杭 洪 包 诸 左 石 崔 吉 钮 龚 程 嵇 邢 滑 裴 陆 荣 翁 荀 羊 於 惠 甄 麴 家 封 芮 羿 储 靳 汲 邴 糜 松 井 段 富 巫 乌 焦 巴 弓 牧 隗 山 谷 车 侯 宓 蓬 全 郗 班 仰 秋 仲 伊 宫 宁 仇 栾 暴 甘 钭 历 戎 祖 武 符 刘 景 詹 束 龙 叶 幸 司 韶 郜 黎 蓟 溥 印 宿 白 怀 蒲 邰 从 鄂 索 咸 籍 赖 卓 蔺 屠 蒙 池 乔 阳 郁 胥 能 苍 双 闻 莘 党 翟 谭 贡 劳 逄 姬 申 扶 堵 冉 宰 郦 雍 却 璩 桑 桂 濮 牛 寿 通 边 扈 燕 冀 僪 浦 尚 农 温 别 庄 晏 柴 瞿 阎 充 慕 连 茹 习 宦 艾 鱼 容 向 古 易 慎 戈 廖 庾 终 暨 居 衡 步 都 耿 满 弘 匡 国 文 寇 广 禄 阙 东 欧 殳 沃 利 蔚 越 夔 隆 师 巩 厍 聂 晁 勾 敖 融 冷 訾 辛 阚 那 简 饶 空 曾 毋 沙 乜 养 鞠 须 丰 巢 关 蒯 相 查 后 荆 红 游 竺 权 逮 盍 益 桓 公";
		String[] firstNames = firstName.split(" ");
		String name = getRandomStrFromArr(firstNames);
		return name;
	}

	public static String getRandomName2() {
		String firstName = getRandomFirstName();
		String[] firstNames = firstName.split(" ");
		String girls = "梦琪、之桃、慕青、尔岚、初夏、沛菡、傲珊、曼文、乐菱、惜文、香寒、新柔、语蓉、海安、夜蓉、涵柏、水桃、醉蓝、语琴、从彤、傲晴、语兰、又菱、碧彤、元霜、怜梦、紫寒、妙彤、曼易、南莲、紫翠、雨寒、易烟、如萱、若南、寻真、晓亦、向珊、慕灵、以蕊、映易、雪柳、海云、凝天、沛珊、寒云、冰旋、宛儿、绿真、晓霜、碧凡、夏菡、曼香、若烟、半梦、雅绿、冰蓝、灵槐、平安、书翠、翠风、代云、梦曼、幼翠、听寒、梦柏、醉易、访旋、亦玉、凌萱、访卉、怀亦、笑蓝、靖柏、夜蕾、冰夏、梦松、书雪、乐枫、念薇、靖雁、从寒、觅波、静曼、凡旋、以亦、念露、芷蕾、千兰、新波、代真、新蕾、雁玉、冷卉、紫山、千琴、傲芙、盼山、怀蝶、冰兰、山柏、翠萱、问旋、白易、问筠、如霜、半芹、丹珍、冰彤、亦寒、之瑶、冰露、尔珍、谷雪、乐萱、涵菡、海莲、傲蕾、青槐、易梦、惜雪、宛海、之柔、夏青、亦瑶、妙菡、紫蓝、幻柏、元风、冰枫、访蕊、芷蕊、凡蕾、凡柔、安蕾、天荷、含玉、书兰、雅琴、书瑶、从安、夏槐、念芹、代曼、幻珊、谷丝、秋翠、白晴、海露、代荷、含玉、书蕾、听白、灵雁、雪青、乐瑶、含烟、涵双、平蝶、雅蕊、傲之、灵薇、含蕾、从梦、从蓉、初丹、听兰、听蓉、语芙、夏彤、凌瑶、忆翠、幻灵、怜菡、紫南、依珊、妙竹、访烟、怜蕾、映寒、友绿、冰萍、惜霜、凌香、芷蕾、雁卉、迎梦、元柏、代萱、紫真、千青、凌寒、紫安、寒安、怀蕊、秋荷、涵雁、以山、凡梅、盼曼、翠彤、谷冬、冷安、千萍、冰烟、雅阳、友绿、南松、诗云、飞风、寄灵、书芹、幼蓉、以蓝、笑寒、忆寒、秋烟、芷巧、水香、映之、醉波、幻莲、夜山、芷卉、向彤、小玉、幼南、凡梦、尔曼、念波、迎松、青寒、笑天、涵蕾、碧菡、映秋、盼烟、忆山、以寒、寒香、小凡、代亦、梦露、映波、友蕊、寄凡、怜蕾、雁枫、水绿、曼荷、笑珊、寒珊、谷南、慕儿、夏岚、友儿、小萱、紫青、妙菱、冬寒、曼柔、语蝶、青筠、夜安、觅海、问安、晓槐、雅山、访云、翠容、寒凡、晓绿、以菱、冬云、含玉、访枫、含卉、夜白、冷安、灵竹、醉薇、元珊、幻波、盼夏、元瑶、迎曼、水云、访琴、谷波、笑白、妙海、紫霜、凌旋、孤丝、怜寒、凡松、青丝、翠安、如天、凌雪、绮菱、代云、香薇、冬灵、凌珍、沛文、紫槐、幻柏、采文、雪旋、盼海、映梦、安雁、映容、凝阳、访风、天亦、觅风、小霜、雪萍、半雪、山柳、谷雪、靖易、白薇、梦菡、飞绿、如波、又晴、友易、香菱、冬亦、问雁、海冬、秋灵、凝芙、念烟、白山、从灵、尔芙、迎蓉、念寒、翠绿、翠芙、靖儿、妙柏、千凝、小珍、妙旋、雪枫、夏菡、绮琴、雨双、听枫、觅荷、凡之、晓凡、雅彤、孤风、从安、绮彤、之玉、雨珍、幻丝、代梅、青亦、元菱、海瑶、飞槐、听露、梦岚、幻竹、谷云、忆霜、水瑶、慕晴、秋双、雨真、觅珍、丹雪、元枫、思天、如松、妙晴、谷秋、妙松、晓夏、宛筠、碧琴、盼兰、小夏、安容、青曼、千儿、寻双、涵瑶、冷梅、秋柔、思菱、醉波、醉柳、以寒、迎夏、向雪、以丹、依凝、如柏、雁菱、凝竹、宛白、初柔、南蕾、书萱、梦槐、南琴、绿海、沛儿、晓瑶、凝蝶、紫雪、念双、念真、曼寒、凡霜、飞雪、雪兰、雅霜、从蓉、冷雪、靖巧、翠丝、觅翠、凡白、乐蓉、迎波、丹烟、梦旋、书双、念桃、夜天、安筠、觅柔、初南、秋蝶、千易、安露、诗蕊、山雁、友菱、香露、晓兰、白卉、语山、冷珍、秋翠、夏柳、如之、忆南、书易、翠桃、寄瑶、如曼、问柳、幻桃、又菡、醉蝶、亦绿、诗珊、听芹、新之、易巧、念云、晓灵、静枫、夏蓉、如南、幼丝、秋白、冰安、秋白、南风、醉山、初彤、凝海、紫文、凌晴、雅琴、傲安、傲之、初蝶、代芹、诗霜、碧灵、诗柳、夏柳、采白、慕梅、乐安、冬菱、紫安、宛凝、雨雪、易真、安荷、静竹、代柔、丹秋、绮梅、依白、凝荷、幼珊、忆彤、凌青、之桃、芷荷、听荷、代玉、念珍、梦菲、夜春、千秋、白秋、谷菱、飞松、初瑶、惜灵、梦易、新瑶、曼梅、碧曼、友瑶、雨兰、夜柳、芷珍、含芙、夜云、依萱、凝雁、以莲、安南、幼晴、尔琴、飞阳、白凡、沛萍、雪瑶、向卉、采文、乐珍、寒荷、觅双、白桃、安卉、迎曼、盼雁、乐松、涵山、问枫、以柳、含海、翠曼、忆梅、涵柳、海蓝、晓曼、代珊、忆丹、静芙、绮兰、梦安、紫丝、千雁、凝珍、香萱、梦容、冷雁、飞柏、天真、翠琴、寄真、秋荷、代珊、初雪、雅柏、怜容、如风、南露、紫易、冰凡、海雪、语蓉、碧玉、语风、凝梦、从雪、白枫、傲云、白梅、念露、慕凝、雅柔、盼柳、半青、从霜、怀柔、怜晴、夜蓉、代双、以南、若菱、芷文、南晴、梦寒、初翠、灵波、问夏、惜海、亦旋、沛芹、幼萱、白凝、初露、迎海、绮玉、凌香、寻芹、秋柳、尔白、映真、含雁、寒松、寻雪、青烟、问蕊、灵阳、雪巧、丹萱、凡双、孤萍、紫菱、寻凝、傲柏、傲儿、友容、灵枫、尔丝、曼凝、若蕊、问丝、思枫、水卉、问梅、念寒、诗双、翠霜、夜香、寒蕾、凡阳、冷玉、平彤、语薇、幻珊、紫夏、凌波、芷蝶、丹南、之双、凡波、思雁、白莲、从菡、如容、采柳、沛岚、惜儿、夜玉、水儿、半凡、语海、听莲、幻枫、念柏、冰珍、思山、凝蕊、天玉、思萱、向梦、笑南、夏旋、之槐、元灵、以彤、采萱、巧曼、绿兰、平蓝、问萍、绿蓉、靖柏、迎蕾、碧曼、思卉、白柏、妙菡、怜阳、雨柏、雁菡、梦之、又莲、乐荷、寒天、凝琴、书南、映天、白梦、初瑶、平露、含巧、慕蕊、半莲、醉卉、天菱、青雪、雅旋、巧荷、飞丹、若灵、尔云、幻天、诗兰、青梦、海菡、灵槐、忆秋、寒凝、凝芙、绮山、静白、尔蓉、尔冬、映萱、白筠、冰双、访彤、绿柏、夏云、笑翠、晓灵、含双、盼波、以云、怜翠、雁风、之卉、平松、问儿、绿柳、如蓉、曼容、天晴、丹琴、惜天、寻琴、依瑶、涵易、忆灵、从波、依柔、问兰、山晴、怜珊、之云、飞双、傲白、沛春、雨南、梦之、笑阳、代容、友琴、雁梅、友桃、从露、语柔、傲玉、觅夏、晓蓝、新晴、雨莲、凝旋、绿旋、幻香、觅双、冷亦、忆雪、友卉、幻翠、靖柔、寻菱、丹翠、安阳、雅寒、惜筠、尔安、雁易、飞瑶、夏兰、沛蓝、静丹、山芙、笑晴、新烟、笑旋、雁兰、凌翠、秋莲、书桃、傲松、语儿、映菡、初曼、听云、初夏、雅香、语雪、初珍、白安、冰薇、诗槐、冷玉、冰巧、之槐、夏寒、诗筠、新梅、白曼、安波、从阳、含桃、曼卉、笑萍、晓露、寻菡、沛白、平灵、水彤、安彤、涵易、乐巧、依风、紫南、亦丝、易蓉、紫萍、惜萱、诗蕾、寻绿、诗双、寻云、孤丹、谷蓝、山灵、幻丝、友梅、从云、雁丝、盼旋、幼旋、尔蓝、沛山、代丝、觅松、冰香、依玉、冰之、妙梦、以冬、曼青、冷菱、雪曼、安白、千亦、凌蝶、又夏、南烟、靖易、沛凝、翠梅、书文、雪卉、乐儿、傲丝、安青、初蝶、寄灵、惜寒、雨竹、冬莲、绮南、翠柏、平凡、亦玉、孤兰、秋珊、新筠、半芹、夏瑶、念文、晓丝、涵蕾、雁凡、谷兰、灵凡、凝云、曼云、丹彤、南霜、夜梦、从筠、雁芙、语蝶、依波、晓旋、念之、盼芙、曼安、采珊、初柳、迎天、曼安、南珍、妙芙、语柳、含莲、晓筠、夏山、尔容、念梦、傲南、问薇、雨灵、凝安、冰海、初珍、宛菡、冬卉、盼晴、冷荷、寄翠、幻梅、如凡、语梦、易梦、千柔、向露、梦玉、傲霜、依霜、灵松、诗桃、书蝶、冰蝶、山槐、以晴、友易、梦桃、香菱、孤云、水蓉、雅容、飞烟、雁荷、代芙、醉易、夏烟、依秋、依波、紫萱、涵易、忆之、幻巧、水风、安寒、白亦、怜雪、听南、念蕾、梦竹、千凡、寄琴、采波、元冬、思菱、平卉、笑柳、雪卉、谷梦、绿蝶、飞荷、平安、孤晴、芷荷、曼冬、尔槐、以旋、绿蕊、初夏、依丝、怜南、千山、雨安、水风、寄柔、幼枫、凡桃、新儿、夏波、雨琴、静槐、元槐、映阳、飞薇、小凝、映寒、傲菡、谷蕊、笑槐、飞兰、笑卉、迎荷、元冬、书竹、半烟、绮波、小之、觅露、夜雪、寒梦、尔风、白梅、雨旋、芷珊、山彤、尔柳、沛柔、灵萱、沛凝、白容、乐蓉、映安、依云、映冬、凡雁、梦秋、醉柳、梦凡、若云、元容、怀蕾、灵寒、天薇、白风、访波、亦凝、易绿、夜南、曼凡、亦巧、青易、冰真、白萱、友安、诗翠、雪珍、海之、小蕊、又琴、香彤、语梦、惜蕊、迎彤、沛白、雁山、易蓉、雪晴、诗珊、冰绿、半梅、笑容、沛凝、念瑶、如冬、向真、从蓉、亦云、向雁、尔蝶、冬易、丹亦、夏山、醉香、盼夏、孤菱、安莲、问凝、冬萱、晓山、雁蓉、梦蕊、山菡、南莲、飞双、凝丝、思萱、怀梦、雨梅、冷霜、向松、迎丝、迎梅、听双、山蝶、夜梅、醉冬、雨筠、平文、青文、半蕾、幼菱、寻梅、含之、香之、含蕊、亦玉、靖荷、碧萱、寒云、向南、书雁、怀薇、思菱、忆文、若山、向秋、凡白、绮烟、从蕾、天曼、又亦、依琴、曼彤、沛槐、又槐、元绿、安珊、夏之、易槐、宛亦、白翠、丹云、问寒、易文、傲易、青旋、思真、妙之、半双、若翠、初兰、怀曼、惜萍、初之、宛丝、幻儿、千风、天蓉、雅青、寄文、代天、惜珊、向薇、冬灵、惜芹、凌青、谷芹、雁桃、映雁、书兰、寄风、访烟、绮晴、傲柔、寄容、以珊、紫雪、芷容、书琴、寻桃、涵阳、怀寒、易云、采蓝、代秋、惜梦、尔烟、谷槐、怀莲、涵菱、水蓝、访冬、半兰、又柔、冬卉、安双、冰岚、香薇、语芹、静珊、幻露、访天、静柏、凌丝、小翠、雁卉、访文、凌文、芷云、思柔、巧凡、慕山、依云、千柳、从凝、安梦、香旋、映天、安柏、平萱、以筠、忆曼、新竹、绮露、觅儿、碧蓉、白竹、飞兰、曼雁、雁露、凝冬、含灵、初阳、海秋、冰双、绿兰、盼易、思松、梦山、友灵、绿竹、灵安、凌柏、秋柔、又蓝、尔竹、天蓝、青枫、问芙、语海、灵珊、凝丹、小蕾、迎夏、水之、飞珍、冰夏、亦竹、飞莲、海白、元蝶、芷天、怀绿、尔容、元芹、若云、寒烟、听筠、采梦、凝莲、元彤、觅山、代桃、冷之、盼秋、秋寒、慕蕊、海亦、初晴、巧蕊、听安、芷雪、以松、梦槐、寒梅、香岚、寄柔、映冬、孤容、晓蕾、安萱、听枫、夜绿、雪莲、从丹、碧蓉、绮琴、雨文、幼荷、青柏、初蓝、忆安、盼晴、寻冬、雪珊、梦寒、迎南、如彤、采枫、若雁、翠阳、沛容、幻翠、山兰、芷波、雪瑶、寄云、慕卉、冷松、涵梅、书白、乐天、雁卉、宛秋、傲旋、新之、凡儿、夏真、静枫、乐双、白玉、问玉、寄松、丹蝶、元瑶、冰蝶、访曼、代灵、芷烟、白易、尔阳、怜烟、平卉、丹寒、访梦、绿凝、冰菱、语蕊、思烟、忆枫、映菱、凌兰、曼岚、若枫、傲薇、凡灵、乐蕊、秋灵、谷槐、觅云";
		String[] girlNames = girls.split("、");
		String name = getRandomStrFromArr(firstNames) + "芯"
				+ getRandomStrFromArr(girlNames).substring(1);
		return name;
	}

	public static String getRandomName3() {
		// String firstName = "徐";
		// String[] firstNames = firstName.split(" ");
		String girls = "梦琪、之桃、慕青、尔岚、初夏、沛菡、傲珊、曼文、乐菱、惜文、香寒、新柔、语蓉、海安、夜蓉、涵柏、水桃、醉蓝、语琴、从彤、傲晴、语兰、又菱、碧彤、元霜、怜梦、紫寒、妙彤、曼易、南莲、紫翠、雨寒、易烟、如萱、若南、寻真、晓亦、向珊、慕灵、以蕊、映易、雪柳、海云、凝天、沛珊、寒云、冰旋、宛儿、绿真、晓霜、碧凡、夏菡、曼香、若烟、半梦、雅绿、冰蓝、灵槐、平安、书翠、翠风、代云、梦曼、幼翠、听寒、梦柏、醉易、访旋、亦玉、凌萱、访卉、怀亦、笑蓝、靖柏、夜蕾、冰夏、梦松、书雪、乐枫、念薇、靖雁、从寒、觅波、静曼、凡旋、以亦、念露、芷蕾、千兰、新波、代真、新蕾、雁玉、冷卉、紫山、千琴、傲芙、盼山、怀蝶、冰兰、山柏、翠萱、问旋、白易、问筠、如霜、半芹、丹珍、冰彤、亦寒、之瑶、冰露、尔珍、谷雪、乐萱、涵菡、海莲、傲蕾、青槐、易梦、惜雪、宛海、之柔、夏青、亦瑶、妙菡、紫蓝、幻柏、元风、冰枫、访蕊、芷蕊、凡蕾、凡柔、安蕾、天荷、含玉、书兰、雅琴、书瑶、从安、夏槐、念芹、代曼、幻珊、谷丝、秋翠、白晴、海露、代荷、含玉、书蕾、听白、灵雁、雪青、乐瑶、含烟、涵双、平蝶、雅蕊、傲之、灵薇、含蕾、从梦、从蓉、初丹、听兰、听蓉、语芙、夏彤、凌瑶、忆翠、幻灵、怜菡、紫南、依珊、妙竹、访烟、怜蕾、映寒、友绿、冰萍、惜霜、凌香、芷蕾、雁卉、迎梦、元柏、代萱、紫真、千青、凌寒、紫安、寒安、怀蕊、秋荷、涵雁、以山、凡梅、盼曼、翠彤、谷冬、冷安、千萍、冰烟、雅阳、友绿、南松、诗云、飞风、寄灵、书芹、幼蓉、以蓝、笑寒、忆寒、秋烟、芷巧、水香、映之、醉波、幻莲、夜山、芷卉、向彤、小玉、幼南、凡梦、尔曼、念波、迎松、青寒、笑天、涵蕾、碧菡、映秋、盼烟、忆山、以寒、寒香、小凡、代亦、梦露、映波、友蕊、寄凡、怜蕾、雁枫、水绿、曼荷、笑珊、寒珊、谷南、慕儿、夏岚、友儿、小萱、紫青、妙菱、冬寒、曼柔、语蝶、青筠、夜安、觅海、问安、晓槐、雅山、访云、翠容、寒凡、晓绿、以菱、冬云、含玉、访枫、含卉、夜白、冷安、灵竹、醉薇、元珊、幻波、盼夏、元瑶、迎曼、水云、访琴、谷波、笑白、妙海、紫霜、凌旋、孤丝、怜寒、凡松、青丝、翠安、如天、凌雪、绮菱、代云、香薇、冬灵、凌珍、沛文、紫槐、幻柏、采文、雪旋、盼海、映梦、安雁、映容、凝阳、访风、天亦、觅风、小霜、雪萍、半雪、山柳、谷雪、靖易、白薇、梦菡、飞绿、如波、又晴、友易、香菱、冬亦、问雁、海冬、秋灵、凝芙、念烟、白山、从灵、尔芙、迎蓉、念寒、翠绿、翠芙、靖儿、妙柏、千凝、小珍、妙旋、雪枫、夏菡、绮琴、雨双、听枫、觅荷、凡之、晓凡、雅彤、孤风、从安、绮彤、之玉、雨珍、幻丝、代梅、青亦、元菱、海瑶、飞槐、听露、梦岚、幻竹、谷云、忆霜、水瑶、慕晴、秋双、雨真、觅珍、丹雪、元枫、思天、如松、妙晴、谷秋、妙松、晓夏、宛筠、碧琴、盼兰、小夏、安容、青曼、千儿、寻双、涵瑶、冷梅、秋柔、思菱、醉波、醉柳、以寒、迎夏、向雪、以丹、依凝、如柏、雁菱、凝竹、宛白、初柔、南蕾、书萱、梦槐、南琴、绿海、沛儿、晓瑶、凝蝶、紫雪、念双、念真、曼寒、凡霜、飞雪、雪兰、雅霜、从蓉、冷雪、靖巧、翠丝、觅翠、凡白、乐蓉、迎波、丹烟、梦旋、书双、念桃、夜天、安筠、觅柔、初南、秋蝶、千易、安露、诗蕊、山雁、友菱、香露、晓兰、白卉、语山、冷珍、秋翠、夏柳、如之、忆南、书易、翠桃、寄瑶、如曼、问柳、幻桃、又菡、醉蝶、亦绿、诗珊、听芹、新之、易巧、念云、晓灵、静枫、夏蓉、如南、幼丝、秋白、冰安、秋白、南风、醉山、初彤、凝海、紫文、凌晴、雅琴、傲安、傲之、初蝶、代芹、诗霜、碧灵、诗柳、夏柳、采白、慕梅、乐安、冬菱、紫安、宛凝、雨雪、易真、安荷、静竹、代柔、丹秋、绮梅、依白、凝荷、幼珊、忆彤、凌青、之桃、芷荷、听荷、代玉、念珍、梦菲、夜春、千秋、白秋、谷菱、飞松、初瑶、惜灵、梦易、新瑶、曼梅、碧曼、友瑶、雨兰、夜柳、芷珍、含芙、夜云、依萱、凝雁、以莲、安南、幼晴、尔琴、飞阳、白凡、沛萍、雪瑶、向卉、采文、乐珍、寒荷、觅双、白桃、安卉、迎曼、盼雁、乐松、涵山、问枫、以柳、含海、翠曼、忆梅、涵柳、海蓝、晓曼、代珊、忆丹、静芙、绮兰、梦安、紫丝、千雁、凝珍、香萱、梦容、冷雁、飞柏、天真、翠琴、寄真、秋荷、代珊、初雪、雅柏、怜容、如风、南露、紫易、冰凡、海雪、语蓉、碧玉、语风、凝梦、从雪、白枫、傲云、白梅、念露、慕凝、雅柔、盼柳、半青、从霜、怀柔、怜晴、夜蓉、代双、以南、若菱、芷文、南晴、梦寒、初翠、灵波、问夏、惜海、亦旋、沛芹、幼萱、白凝、初露、迎海、绮玉、凌香、寻芹、秋柳、尔白、映真、含雁、寒松、寻雪、青烟、问蕊、灵阳、雪巧、丹萱、凡双、孤萍、紫菱、寻凝、傲柏、傲儿、友容、灵枫、尔丝、曼凝、若蕊、问丝、思枫、水卉、问梅、念寒、诗双、翠霜、夜香、寒蕾、凡阳、冷玉、平彤、语薇、幻珊、紫夏、凌波、芷蝶、丹南、之双、凡波、思雁、白莲、从菡、如容、采柳、沛岚、惜儿、夜玉、水儿、半凡、语海、听莲、幻枫、念柏、冰珍、思山、凝蕊、天玉、思萱、向梦、笑南、夏旋、之槐、元灵、以彤、采萱、巧曼、绿兰、平蓝、问萍、绿蓉、靖柏、迎蕾、碧曼、思卉、白柏、妙菡、怜阳、雨柏、雁菡、梦之、又莲、乐荷、寒天、凝琴、书南、映天、白梦、初瑶、平露、含巧、慕蕊、半莲、醉卉、天菱、青雪、雅旋、巧荷、飞丹、若灵、尔云、幻天、诗兰、青梦、海菡、灵槐、忆秋、寒凝、凝芙、绮山、静白、尔蓉、尔冬、映萱、白筠、冰双、访彤、绿柏、夏云、笑翠、晓灵、含双、盼波、以云、怜翠、雁风、之卉、平松、问儿、绿柳、如蓉、曼容、天晴、丹琴、惜天、寻琴、依瑶、涵易、忆灵、从波、依柔、问兰、山晴、怜珊、之云、飞双、傲白、沛春、雨南、梦之、笑阳、代容、友琴、雁梅、友桃、从露、语柔、傲玉、觅夏、晓蓝、新晴、雨莲、凝旋、绿旋、幻香、觅双、冷亦、忆雪、友卉、幻翠、靖柔、寻菱、丹翠、安阳、雅寒、惜筠、尔安、雁易、飞瑶、夏兰、沛蓝、静丹、山芙、笑晴、新烟、笑旋、雁兰、凌翠、秋莲、书桃、傲松、语儿、映菡、初曼、听云、初夏、雅香、语雪、初珍、白安、冰薇、诗槐、冷玉、冰巧、之槐、夏寒、诗筠、新梅、白曼、安波、从阳、含桃、曼卉、笑萍、晓露、寻菡、沛白、平灵、水彤、安彤、涵易、乐巧、依风、紫南、亦丝、易蓉、紫萍、惜萱、诗蕾、寻绿、诗双、寻云、孤丹、谷蓝、山灵、幻丝、友梅、从云、雁丝、盼旋、幼旋、尔蓝、沛山、代丝、觅松、冰香、依玉、冰之、妙梦、以冬、曼青、冷菱、雪曼、安白、千亦、凌蝶、又夏、南烟、靖易、沛凝、翠梅、书文、雪卉、乐儿、傲丝、安青、初蝶、寄灵、惜寒、雨竹、冬莲、绮南、翠柏、平凡、亦玉、孤兰、秋珊、新筠、半芹、夏瑶、念文、晓丝、涵蕾、雁凡、谷兰、灵凡、凝云、曼云、丹彤、南霜、夜梦、从筠、雁芙、语蝶、依波、晓旋、念之、盼芙、曼安、采珊、初柳、迎天、曼安、南珍、妙芙、语柳、含莲、晓筠、夏山、尔容、念梦、傲南、问薇、雨灵、凝安、冰海、初珍、宛菡、冬卉、盼晴、冷荷、寄翠、幻梅、如凡、语梦、易梦、千柔、向露、梦玉、傲霜、依霜、灵松、诗桃、书蝶、冰蝶、山槐、以晴、友易、梦桃、香菱、孤云、水蓉、雅容、飞烟、雁荷、代芙、醉易、夏烟、依秋、依波、紫萱、涵易、忆之、幻巧、水风、安寒、白亦、怜雪、听南、念蕾、梦竹、千凡、寄琴、采波、元冬、思菱、平卉、笑柳、雪卉、谷梦、绿蝶、飞荷、平安、孤晴、芷荷、曼冬、尔槐、以旋、绿蕊、初夏、依丝、怜南、千山、雨安、水风、寄柔、幼枫、凡桃、新儿、夏波、雨琴、静槐、元槐、映阳、飞薇、小凝、映寒、傲菡、谷蕊、笑槐、飞兰、笑卉、迎荷、元冬、书竹、半烟、绮波、小之、觅露、夜雪、寒梦、尔风、白梅、雨旋、芷珊、山彤、尔柳、沛柔、灵萱、沛凝、白容、乐蓉、映安、依云、映冬、凡雁、梦秋、醉柳、梦凡、若云、元容、怀蕾、灵寒、天薇、白风、访波、亦凝、易绿、夜南、曼凡、亦巧、青易、冰真、白萱、友安、诗翠、雪珍、海之、小蕊、又琴、香彤、语梦、惜蕊、迎彤、沛白、雁山、易蓉、雪晴、诗珊、冰绿、半梅、笑容、沛凝、念瑶、如冬、向真、从蓉、亦云、向雁、尔蝶、冬易、丹亦、夏山、醉香、盼夏、孤菱、安莲、问凝、冬萱、晓山、雁蓉、梦蕊、山菡、南莲、飞双、凝丝、思萱、怀梦、雨梅、冷霜、向松、迎丝、迎梅、听双、山蝶、夜梅、醉冬、雨筠、平文、青文、半蕾、幼菱、寻梅、含之、香之、含蕊、亦玉、靖荷、碧萱、寒云、向南、书雁、怀薇、思菱、忆文、若山、向秋、凡白、绮烟、从蕾、天曼、又亦、依琴、曼彤、沛槐、又槐、元绿、安珊、夏之、易槐、宛亦、白翠、丹云、问寒、易文、傲易、青旋、思真、妙之、半双、若翠、初兰、怀曼、惜萍、初之、宛丝、幻儿、千风、天蓉、雅青、寄文、代天、惜珊、向薇、冬灵、惜芹、凌青、谷芹、雁桃、映雁、书兰、寄风、访烟、绮晴、傲柔、寄容、以珊、紫雪、芷容、书琴、寻桃、涵阳、怀寒、易云、采蓝、代秋、惜梦、尔烟、谷槐、怀莲、涵菱、水蓝、访冬、半兰、又柔、冬卉、安双、冰岚、香薇、语芹、静珊、幻露、访天、静柏、凌丝、小翠、雁卉、访文、凌文、芷云、思柔、巧凡、慕山、依云、千柳、从凝、安梦、香旋、映天、安柏、平萱、以筠、忆曼、新竹、绮露、觅儿、碧蓉、白竹、飞兰、曼雁、雁露、凝冬、含灵、初阳、海秋、冰双、绿兰、盼易、思松、梦山、友灵、绿竹、灵安、凌柏、秋柔、又蓝、尔竹、天蓝、青枫、问芙、语海、灵珊、凝丹、小蕾、迎夏、水之、飞珍、冰夏、亦竹、飞莲、海白、元蝶、芷天、怀绿、尔容、元芹、若云、寒烟、听筠、采梦、凝莲、元彤、觅山、代桃、冷之、盼秋、秋寒、慕蕊、海亦、初晴、巧蕊、听安、芷雪、以松、梦槐、寒梅、香岚、寄柔、映冬、孤容、晓蕾、安萱、听枫、夜绿、雪莲、从丹、碧蓉、绮琴、雨文、幼荷、青柏、初蓝、忆安、盼晴、寻冬、雪珊、梦寒、迎南、如彤、采枫、若雁、翠阳、沛容、幻翠、山兰、芷波、雪瑶、寄云、慕卉、冷松、涵梅、书白、乐天、雁卉、宛秋、傲旋、新之、凡儿、夏真、静枫、乐双、白玉、问玉、寄松、丹蝶、元瑶、冰蝶、访曼、代灵、芷烟、白易、尔阳、怜烟、平卉、丹寒、访梦、绿凝、冰菱、语蕊、思烟、忆枫、映菱、凌兰、曼岚、若枫、傲薇、凡灵、乐蕊、秋灵、谷槐、觅云";
		String[] girlNames = girls.split("、");
		String midname = getRandomStrFromArr(girlNames).substring(0, 1);

		return "庞" + midname;
	}

	public static String getRandomTagName(String firstName) {
		// String firstName = "宋";
		String[] firstNames = firstName.split(" ");
		String girls = "梦琪、之桃、慕青、尔岚、初夏、沛菡、傲珊、曼文、乐菱、惜文、香寒、新柔、语蓉、海安、夜蓉、涵柏、水桃、醉蓝、语琴、从彤、傲晴、语兰、又菱、碧彤、元霜、怜梦、紫寒、妙彤、曼易、南莲、紫翠、雨寒、易烟、如萱、若南、寻真、晓亦、向珊、慕灵、以蕊、映易、雪柳、海云、凝天、沛珊、寒云、冰旋、宛儿、绿真、晓霜、碧凡、夏菡、曼香、若烟、半梦、雅绿、冰蓝、灵槐、平安、书翠、翠风、代云、梦曼、幼翠、听寒、梦柏、醉易、访旋、亦玉、凌萱、访卉、怀亦、笑蓝、靖柏、夜蕾、冰夏、梦松、书雪、乐枫、念薇、靖雁、从寒、觅波、静曼、凡旋、以亦、念露、芷蕾、千兰、新波、代真、新蕾、雁玉、冷卉、紫山、千琴、傲芙、盼山、怀蝶、冰兰、山柏、翠萱、问旋、白易、问筠、如霜、半芹、丹珍、冰彤、亦寒、之瑶、冰露、尔珍、谷雪、乐萱、涵菡、海莲、傲蕾、青槐、易梦、惜雪、宛海、之柔、夏青、亦瑶、妙菡、紫蓝、幻柏、元风、冰枫、访蕊、芷蕊、凡蕾、凡柔、安蕾、天荷、含玉、书兰、雅琴、书瑶、从安、夏槐、念芹、代曼、幻珊、谷丝、秋翠、白晴、海露、代荷、含玉、书蕾、听白、灵雁、雪青、乐瑶、含烟、涵双、平蝶、雅蕊、傲之、灵薇、含蕾、从梦、从蓉、初丹、听兰、听蓉、语芙、夏彤、凌瑶、忆翠、幻灵、怜菡、紫南、依珊、妙竹、访烟、怜蕾、映寒、友绿、冰萍、惜霜、凌香、芷蕾、雁卉、迎梦、元柏、代萱、紫真、千青、凌寒、紫安、寒安、怀蕊、秋荷、涵雁、以山、凡梅、盼曼、翠彤、谷冬、冷安、千萍、冰烟、雅阳、友绿、南松、诗云、飞风、寄灵、书芹、幼蓉、以蓝、笑寒、忆寒、秋烟、芷巧、水香、映之、醉波、幻莲、夜山、芷卉、向彤、小玉、幼南、凡梦、尔曼、念波、迎松、青寒、笑天、涵蕾、碧菡、映秋、盼烟、忆山、以寒、寒香、小凡、代亦、梦露、映波、友蕊、寄凡、怜蕾、雁枫、水绿、曼荷、笑珊、寒珊、谷南、慕儿、夏岚、友儿、小萱、紫青、妙菱、冬寒、曼柔、语蝶、青筠、夜安、觅海、问安、晓槐、雅山、访云、翠容、寒凡、晓绿、以菱、冬云、含玉、访枫、含卉、夜白、冷安、灵竹、醉薇、元珊、幻波、盼夏、元瑶、迎曼、水云、访琴、谷波、笑白、妙海、紫霜、凌旋、孤丝、怜寒、凡松、青丝、翠安、如天、凌雪、绮菱、代云、香薇、冬灵、凌珍、沛文、紫槐、幻柏、采文、雪旋、盼海、映梦、安雁、映容、凝阳、访风、天亦、觅风、小霜、雪萍、半雪、山柳、谷雪、靖易、白薇、梦菡、飞绿、如波、又晴、友易、香菱、冬亦、问雁、海冬、秋灵、凝芙、念烟、白山、从灵、尔芙、迎蓉、念寒、翠绿、翠芙、靖儿、妙柏、千凝、小珍、妙旋、雪枫、夏菡、绮琴、雨双、听枫、觅荷、凡之、晓凡、雅彤、孤风、从安、绮彤、之玉、雨珍、幻丝、代梅、青亦、元菱、海瑶、飞槐、听露、梦岚、幻竹、谷云、忆霜、水瑶、慕晴、秋双、雨真、觅珍、丹雪、元枫、思天、如松、妙晴、谷秋、妙松、晓夏、宛筠、碧琴、盼兰、小夏、安容、青曼、千儿、寻双、涵瑶、冷梅、秋柔、思菱、醉波、醉柳、以寒、迎夏、向雪、以丹、依凝、如柏、雁菱、凝竹、宛白、初柔、南蕾、书萱、梦槐、南琴、绿海、沛儿、晓瑶、凝蝶、紫雪、念双、念真、曼寒、凡霜、飞雪、雪兰、雅霜、从蓉、冷雪、靖巧、翠丝、觅翠、凡白、乐蓉、迎波、丹烟、梦旋、书双、念桃、夜天、安筠、觅柔、初南、秋蝶、千易、安露、诗蕊、山雁、友菱、香露、晓兰、白卉、语山、冷珍、秋翠、夏柳、如之、忆南、书易、翠桃、寄瑶、如曼、问柳、幻桃、又菡、醉蝶、亦绿、诗珊、听芹、新之、易巧、念云、晓灵、静枫、夏蓉、如南、幼丝、秋白、冰安、秋白、南风、醉山、初彤、凝海、紫文、凌晴、雅琴、傲安、傲之、初蝶、代芹、诗霜、碧灵、诗柳、夏柳、采白、慕梅、乐安、冬菱、紫安、宛凝、雨雪、易真、安荷、静竹、代柔、丹秋、绮梅、依白、凝荷、幼珊、忆彤、凌青、之桃、芷荷、听荷、代玉、念珍、梦菲、夜春、千秋、白秋、谷菱、飞松、初瑶、惜灵、梦易、新瑶、曼梅、碧曼、友瑶、雨兰、夜柳、芷珍、含芙、夜云、依萱、凝雁、以莲、安南、幼晴、尔琴、飞阳、白凡、沛萍、雪瑶、向卉、采文、乐珍、寒荷、觅双、白桃、安卉、迎曼、盼雁、乐松、涵山、问枫、以柳、含海、翠曼、忆梅、涵柳、海蓝、晓曼、代珊、忆丹、静芙、绮兰、梦安、紫丝、千雁、凝珍、香萱、梦容、冷雁、飞柏、天真、翠琴、寄真、秋荷、代珊、初雪、雅柏、怜容、如风、南露、紫易、冰凡、海雪、语蓉、碧玉、语风、凝梦、从雪、白枫、傲云、白梅、念露、慕凝、雅柔、盼柳、半青、从霜、怀柔、怜晴、夜蓉、代双、以南、若菱、芷文、南晴、梦寒、初翠、灵波、问夏、惜海、亦旋、沛芹、幼萱、白凝、初露、迎海、绮玉、凌香、寻芹、秋柳、尔白、映真、含雁、寒松、寻雪、青烟、问蕊、灵阳、雪巧、丹萱、凡双、孤萍、紫菱、寻凝、傲柏、傲儿、友容、灵枫、尔丝、曼凝、若蕊、问丝、思枫、水卉、问梅、念寒、诗双、翠霜、夜香、寒蕾、凡阳、冷玉、平彤、语薇、幻珊、紫夏、凌波、芷蝶、丹南、之双、凡波、思雁、白莲、从菡、如容、采柳、沛岚、惜儿、夜玉、水儿、半凡、语海、听莲、幻枫、念柏、冰珍、思山、凝蕊、天玉、思萱、向梦、笑南、夏旋、之槐、元灵、以彤、采萱、巧曼、绿兰、平蓝、问萍、绿蓉、靖柏、迎蕾、碧曼、思卉、白柏、妙菡、怜阳、雨柏、雁菡、梦之、又莲、乐荷、寒天、凝琴、书南、映天、白梦、初瑶、平露、含巧、慕蕊、半莲、醉卉、天菱、青雪、雅旋、巧荷、飞丹、若灵、尔云、幻天、诗兰、青梦、海菡、灵槐、忆秋、寒凝、凝芙、绮山、静白、尔蓉、尔冬、映萱、白筠、冰双、访彤、绿柏、夏云、笑翠、晓灵、含双、盼波、以云、怜翠、雁风、之卉、平松、问儿、绿柳、如蓉、曼容、天晴、丹琴、惜天、寻琴、依瑶、涵易、忆灵、从波、依柔、问兰、山晴、怜珊、之云、飞双、傲白、沛春、雨南、梦之、笑阳、代容、友琴、雁梅、友桃、从露、语柔、傲玉、觅夏、晓蓝、新晴、雨莲、凝旋、绿旋、幻香、觅双、冷亦、忆雪、友卉、幻翠、靖柔、寻菱、丹翠、安阳、雅寒、惜筠、尔安、雁易、飞瑶、夏兰、沛蓝、静丹、山芙、笑晴、新烟、笑旋、雁兰、凌翠、秋莲、书桃、傲松、语儿、映菡、初曼、听云、初夏、雅香、语雪、初珍、白安、冰薇、诗槐、冷玉、冰巧、之槐、夏寒、诗筠、新梅、白曼、安波、从阳、含桃、曼卉、笑萍、晓露、寻菡、沛白、平灵、水彤、安彤、涵易、乐巧、依风、紫南、亦丝、易蓉、紫萍、惜萱、诗蕾、寻绿、诗双、寻云、孤丹、谷蓝、山灵、幻丝、友梅、从云、雁丝、盼旋、幼旋、尔蓝、沛山、代丝、觅松、冰香、依玉、冰之、妙梦、以冬、曼青、冷菱、雪曼、安白、千亦、凌蝶、又夏、南烟、靖易、沛凝、翠梅、书文、雪卉、乐儿、傲丝、安青、初蝶、寄灵、惜寒、雨竹、冬莲、绮南、翠柏、平凡、亦玉、孤兰、秋珊、新筠、半芹、夏瑶、念文、晓丝、涵蕾、雁凡、谷兰、灵凡、凝云、曼云、丹彤、南霜、夜梦、从筠、雁芙、语蝶、依波、晓旋、念之、盼芙、曼安、采珊、初柳、迎天、曼安、南珍、妙芙、语柳、含莲、晓筠、夏山、尔容、念梦、傲南、问薇、雨灵、凝安、冰海、初珍、宛菡、冬卉、盼晴、冷荷、寄翠、幻梅、如凡、语梦、易梦、千柔、向露、梦玉、傲霜、依霜、灵松、诗桃、书蝶、冰蝶、山槐、以晴、友易、梦桃、香菱、孤云、水蓉、雅容、飞烟、雁荷、代芙、醉易、夏烟、依秋、依波、紫萱、涵易、忆之、幻巧、水风、安寒、白亦、怜雪、听南、念蕾、梦竹、千凡、寄琴、采波、元冬、思菱、平卉、笑柳、雪卉、谷梦、绿蝶、飞荷、平安、孤晴、芷荷、曼冬、尔槐、以旋、绿蕊、初夏、依丝、怜南、千山、雨安、水风、寄柔、幼枫、凡桃、新儿、夏波、雨琴、静槐、元槐、映阳、飞薇、小凝、映寒、傲菡、谷蕊、笑槐、飞兰、笑卉、迎荷、元冬、书竹、半烟、绮波、小之、觅露、夜雪、寒梦、尔风、白梅、雨旋、芷珊、山彤、尔柳、沛柔、灵萱、沛凝、白容、乐蓉、映安、依云、映冬、凡雁、梦秋、醉柳、梦凡、若云、元容、怀蕾、灵寒、天薇、白风、访波、亦凝、易绿、夜南、曼凡、亦巧、青易、冰真、白萱、友安、诗翠、雪珍、海之、小蕊、又琴、香彤、语梦、惜蕊、迎彤、沛白、雁山、易蓉、雪晴、诗珊、冰绿、半梅、笑容、沛凝、念瑶、如冬、向真、从蓉、亦云、向雁、尔蝶、冬易、丹亦、夏山、醉香、盼夏、孤菱、安莲、问凝、冬萱、晓山、雁蓉、梦蕊、山菡、南莲、飞双、凝丝、思萱、怀梦、雨梅、冷霜、向松、迎丝、迎梅、听双、山蝶、夜梅、醉冬、雨筠、平文、青文、半蕾、幼菱、寻梅、含之、香之、含蕊、亦玉、靖荷、碧萱、寒云、向南、书雁、怀薇、思菱、忆文、若山、向秋、凡白、绮烟、从蕾、天曼、又亦、依琴、曼彤、沛槐、又槐、元绿、安珊、夏之、易槐、宛亦、白翠、丹云、问寒、易文、傲易、青旋、思真、妙之、半双、若翠、初兰、怀曼、惜萍、初之、宛丝、幻儿、千风、天蓉、雅青、寄文、代天、惜珊、向薇、冬灵、惜芹、凌青、谷芹、雁桃、映雁、书兰、寄风、访烟、绮晴、傲柔、寄容、以珊、紫雪、芷容、书琴、寻桃、涵阳、怀寒、易云、采蓝、代秋、惜梦、尔烟、谷槐、怀莲、涵菱、水蓝、访冬、半兰、又柔、冬卉、安双、冰岚、香薇、语芹、静珊、幻露、访天、静柏、凌丝、小翠、雁卉、访文、凌文、芷云、思柔、巧凡、慕山、依云、千柳、从凝、安梦、香旋、映天、安柏、平萱、以筠、忆曼、新竹、绮露、觅儿、碧蓉、白竹、飞兰、曼雁、雁露、凝冬、含灵、初阳、海秋、冰双、绿兰、盼易、思松、梦山、友灵、绿竹、灵安、凌柏、秋柔、又蓝、尔竹、天蓝、青枫、问芙、语海、灵珊、凝丹、小蕾、迎夏、水之、飞珍、冰夏、亦竹、飞莲、海白、元蝶、芷天、怀绿、尔容、元芹、若云、寒烟、听筠、采梦、凝莲、元彤、觅山、代桃、冷之、盼秋、秋寒、慕蕊、海亦、初晴、巧蕊、听安、芷雪、以松、梦槐、寒梅、香岚、寄柔、映冬、孤容、晓蕾、安萱、听枫、夜绿、雪莲、从丹、碧蓉、绮琴、雨文、幼荷、青柏、初蓝、忆安、盼晴、寻冬、雪珊、梦寒、迎南、如彤、采枫、若雁、翠阳、沛容、幻翠、山兰、芷波、雪瑶、寄云、慕卉、冷松、涵梅、书白、乐天、雁卉、宛秋、傲旋、新之、凡儿、夏真、静枫、乐双、白玉、问玉、寄松、丹蝶、元瑶、冰蝶、访曼、代灵、芷烟、白易、尔阳、怜烟、平卉、丹寒、访梦、绿凝、冰菱、语蕊、思烟、忆枫、映菱、凌兰、曼岚、若枫、傲薇、凡灵、乐蕊、秋灵、谷槐、觅云";
		String[] girlNames = girls.split("、");
		String name = getRandomStrFromArr(firstNames)
				+ getRandomStrFromArr(girlNames);
		return name;
	}

	public static String afterSpecStr(String res, String specStr) {
		if (res == null || specStr == null) {
			return null;
		}
		int pos = res.indexOf(specStr);
		if (pos == -1) {
			return null;
		}
		String leftStr = res.substring(pos + specStr.length());
		return leftStr;
	}

	public static String inTwoStrSimple(String res, String innerBegin) {
		return inTwoStr(res, innerBegin, "\"");
	}

	public static String inTwoStrSimple2(String res, String innerBegin) {
		return inTwoStr(res, innerBegin, "'");
	}

	/**
	 * 在源字符串中截取两个字符串之间的字符串（都不包含）,第一次出现的首字符串及紧跟着首字符串出现的尾字符串。
	 * 
	 * @param originalStr
	 * @param innerBegin
	 * @param innerEnd
	 * @return
	 */
	public static String inTwoStr(String originalStr, String innerBegin,
			String innerEnd) {
		if (originalStr == null || innerBegin == null || innerEnd == null) {
			return null;
		}
		int beginPos = originalStr.indexOf(innerBegin);
		if (beginPos == -1) {
			return null;
		}
		String leftStr = originalStr.substring(beginPos + innerBegin.length());
		int endPos = leftStr.indexOf(innerEnd);
		if (endPos == -1) {
			return null;
		}
		return leftStr.substring(0, endPos).trim();
	}

	public static String inTwoStrReg(String originalStr, String innerBegin,
			String innerEnd) {
		String res = inTwoStr(originalStr, innerBegin, innerEnd);
		if (res == null) {
			return "";
		}
		return res;
	}

	/**
	 * 在指定的字符串之前的字符串
	 * 
	 * @param originalStr
	 * @param innerBegin
	 * @param innerEnd
	 * @return
	 */
	public static String inLastTwoStrBeforeSpecStr(String originalStr,
			String specStr, String innerBegin, String innerEnd) {
		if (originalStr == null || innerBegin == null || innerEnd == null
				|| specStr == null) {
			return null;
		}
		int disPos = originalStr.lastIndexOf(specStr);
		if (disPos == -1) {
			return null;
		}
		// 制定字符串之前的字符串
		String beStr = originalStr.substring(0, disPos);

		int beginPos = beStr.lastIndexOf(innerBegin);
		String wantedStr = beStr.substring(beginPos);
		return StringUtil.inTwoStr(wantedStr, innerBegin, innerEnd);
	}

	/**
	 * 从源字符串中截取包含首字符串和末字符串且都是第一个出现的字符串
	 * 
	 * @param originalStr
	 * @param innerBegin
	 * @param innerEnd
	 * @return
	 */
	public static String includeFirstBegiFirstnStr(String originalStr,
			String innerBegin, String innerEnd) {
		if (originalStr == null || innerBegin == null || innerEnd == null) {
			return null;
		}
		int beginPos = originalStr.indexOf(innerBegin);
		if (beginPos == -1) {
			return null;
		}
		String leftStr = originalStr.substring(beginPos);
		int endPos = leftStr.indexOf(innerEnd);
		if (endPos != -1) {
			return leftStr.substring(0, endPos);
		} else {
			return null;
		}
	}

	/**
	 * 将网页中所有包含两个字符串之内（不包含首、末）的字符串提取出来
	 * 
	 * @return
	 */
	public static String[] inTwoStrAll(String originalStr, String beginStr,
			String endStr) {
		List<String> list = inTwoStrAllList(originalStr, beginStr, endStr);
		if (list.isEmpty()) {
			return null;
		} else {
			String[] strArr = new String[list.size()];
			return list.toArray(strArr);
		}
	}

	/**
	 * 将网页中所有包含两个字符串之内（不包含首、末）的字符串提取出来
	 * 
	 * @return
	 */
	public static List<String> inTwoStrAllList(String originalStr,
			String beginStr, String endStr) {
		ArrayList<String> list = new ArrayList<String>();
		if (originalStr == null || beginStr == null || endStr == null) {
			return list;
		}
		int pos = 0;
		int posflag = 0;
		int i = 0;
		int beginLen = beginStr.length();
		while (true) {
			i++;
			pos = originalStr.indexOf(beginStr, pos);
			if (i == 1) {
				posflag = pos;
			}
			if (i > 1 && posflag == pos) {
				break;
			}
			// System.out.println("pos:"+pos);
			int tempPos;
			if (pos != -1) {
				tempPos = pos + beginLen;
				pos = originalStr.indexOf(endStr, tempPos);
				if (pos != -1) {
					String res = originalStr.substring(tempPos, pos);
					// System.out.println("su:"+res);
					list.add(res);
					pos = pos + endStr.length();
				}
			} else {
				break;
			}
		}
		return list;
	}

	/**
	 * 将网页中所有包含两对字符串之内（不包含首、末）的字符串提取出来
	 * 
	 * @return
	 */
	public static Properties inTwoStrPairAllList(String originalStr,
			String firstBeginStr, String firstEndStr, String secBeginStr,
			String secEndStr) {
		Properties props = new Properties();
		if (originalStr == null || firstBeginStr == null || firstEndStr == null
				|| secBeginStr == null || secEndStr == null) {
			return props;
		}
		int pos = 0;
		int firstBeginLen = firstBeginStr.length();
		int firstEndLen = firstEndStr.length();
		int secBeginLen = secBeginStr.length();
		int secEndLen = secEndStr.length();
		while (true) {
			String key = null;
			String value = null;
			pos = originalStr.indexOf(firstBeginStr, pos);
			int tempPos;
			if (pos != -1) {
				tempPos = pos + firstBeginLen;
				pos = originalStr.indexOf(firstEndStr, tempPos);
				if (pos != -1) {
					key = originalStr.substring(tempPos, pos);
					// System.out.println(res);
					// list.add(res);
					pos = pos + firstEndLen;
					pos = originalStr.indexOf(secBeginStr, pos);
					if (pos != -1) {
						tempPos = pos + secBeginLen;
						pos = originalStr.indexOf(secEndStr, tempPos);
						if (pos != -1) {
							value = originalStr.substring(tempPos, pos);
							pos = pos + secEndLen;
						}
					} else {
						continue;
					}
				}
				props.put(key, value);
			} else {
				break;
			}
		}
		return props;
	}

	public static String getArrayInfo(String[] args) {
		StringBuffer sb = new StringBuffer();
		if (args != null) {
			for (int i = 0; i < args.length; i++) {
				if (i > 0) {
					sb.append("|");
				}
				sb.append(args[i]);
			}
		}
		return sb.toString();
	}

	public static void printArr(String[] args) {
		StringBuffer sb = new StringBuffer();
		if (args != null) {
			for (int i = 0; i < args.length; i++) {
				if (i > 0) {
					sb.append("|");
				}
				sb.append(args[i]);
			}
			System.out.println(sb.toString());
		}
	}

	public static void printArr(String name, String[] args) {
		StringBuffer sb = new StringBuffer();
		if (args != null) {
			for (int i = 0; i < args.length; i++) {
				if (i > 0) {
					sb.append("|");
				}
				sb.append(args[i]);
			}
			System.out.println(name + ":" + sb.toString());
		} else {
			System.out.println(name + ":{数组为空}");
		}
	}

	public static void printArrJs(String showInfo, String[] args) {
		StringBuffer sb = new StringBuffer();
		sb.append(showInfo);
		sb.append("\r");
		sb.append("var b = new Array([" + args.length + "]);");
		if (args != null) {
			for (int i = 0; i < args.length; i++) {
				// if (i > 0) {
				sb.append("b[" + i + "]='");
				// }
				sb.append(args[i]);
				sb.append("'; ");
			}
			System.out.println(sb.toString());
		}
	}

	/**
	 * 从索提供的字符串数组中筛选出包涵提供字符串开头的字符串
	 * 
	 * @param arr
	 * @return
	 */
	public static String[] filterBeginWith(String[] arr, String beginStr) {
		List<String> list = new ArrayList<String>();
		for (int i = 0; i < arr.length; i++) {
			if (arr[i].startsWith(beginStr)) {
				list.add(arr[i]);
			}
		}
		String[] rtn = new String[list.size()];
		return list.toArray(rtn);
	}

	/**
	 * 出现在首字符串后面的第一次出现的字符串(不包含)
	 * 
	 * @param res
	 * @param headStr
	 * @param beginStr
	 * @return
	 */
	public static String afterHeadBegin(String res, String headStr,
			String beginStr, String endStr) {
		if (res == null || headStr == null || beginStr == null
				|| endStr == null) {
			return null;
		}
		int pos = res.indexOf(headStr);
		if (pos == -1) {
			return null;
		}
		String leftStr = res.substring(pos + headStr.length());
		return inTwoStr(leftStr, beginStr, endStr);
	}

	/**
	 * 出现在首字符串后面的第一次出现的字符串(不包含)-页面上全部的数据都抓取出来
	 * 
	 * @param res
	 * @param headStr
	 * @param beginStr
	 * @return
	 */
	public static Set afterHeadBeginAll(String res, String headStr,
			String beginStr, String endStr) {
		Set<String> set = new HashSet<String>();
		if (res == null || headStr == null || beginStr == null
				|| endStr == null) {
			return null;
		}
		// 头字符与尾巴字符串之间的提取出来，然后再在中间提取头字符串与尾巴字符串之间的
		String[] resStrArr = StringUtil.inTwoStrAll(res, headStr, endStr);
		for (int i = 0; i < resStrArr.length; i++) {
			String temp = discardBeginStr(resStrArr[i], beginStr);
			if (temp != null) {
				set.add(temp);
			}
		}
		return set;
	}

	public static String discardBeginStr(String res, String beginStr) {
		if (res == null || beginStr == null) {
			return null;
		}
		int pos = res.indexOf(beginStr);
		if (pos == -1) {
			return null;
		} else {
			return res.substring(pos + beginStr.length());
		}
	}

	/**
	 * 给定价格的字符串比较
	 * 
	 * @return
	 */
	public static double compareDouble(String oldVal, String newVal) {
		double adPrice = Double.parseDouble(oldVal);
		double bdPrice = Double.parseDouble(newVal);
		return bdPrice - adPrice;
	}

	public static void printSet(Set sets) {
		Iterator iter = sets.iterator();
		StringBuffer sb = new StringBuffer();
		while (iter.hasNext()) {
			String it = (String) iter.next();
			sb.append(it);
			sb.append(",");
		}
		System.out.println(sb.toString());

	}

	public static void printProperties(Properties props) {
		System.out.println(propertiesToString(props));
	}
	
	public static String propertiesToString(Properties props){
		if(props==null){
			return "{}";
		}
		Set entrySet = props.entrySet();
		Iterator iter = entrySet.iterator();
		StringBuffer sb = new StringBuffer();
		sb.append("{");
		int i = 0;
		while (iter.hasNext()) {
			Entry entry = (Entry) iter.next();
			String key = (String) entry.getKey();
			String val = (String) entry.getValue();
			// System.out.println(key + "=" + val);
			sb.append(key);
			sb.append("=");
			sb.append(val);
			sb.append(",");
			i++;
		}
		if (props.size() > 0) {
			sb.deleteCharAt(sb.length() - 1);
		}
		sb.append("}");
		return sb.toString();
	}
	
	public static void printProperties(Properties props,int showType) {
		Set entrySet = props.entrySet();
		Iterator iter = entrySet.iterator();
		StringBuffer sb = new StringBuffer();
		sb.append("{");
		int i = 0;
		while (iter.hasNext()) {
			Entry entry = (Entry) iter.next();
			String key = (String) entry.getKey();
			String val = (String) entry.getValue();
			if(showType==1){
				 System.out.println(key + "=" + val);
			}
			sb.append(key);
			sb.append("=");
			sb.append(val);
			sb.append(",");
			i++;
		}
		if (props.size() > 0) {
			sb.deleteCharAt(sb.length() - 1);
		}
		sb.append("}");
		if(showType==0){
			System.out.println(sb.toString());
		}
	}

	public static void printMap(Map map) {
		printMap(map, 0);
	}
	
	public static void printMap(Map map,String describe) {
		printMap(map, 0,describe);
	}
	
	public static  void printMap(Map map, int type){
		printMap(map,type,"");
	}

	public static void printMap(Map map, int type,String describe) {
		if (map == null) {
			System.out.println(describe+":"+"null");
			return;
		}
		Set entrySet = map.entrySet();
		Iterator iter = entrySet.iterator();
		if (type == 0) {
			StringBuilder sb = new StringBuilder();
			sb.append("{");
			while (iter.hasNext()) {
				Entry entry = (Entry) iter.next();
				String key = (String) entry.getKey();
				String val = entry.getValue() + "";
				sb.append(key + "=" + val);
				sb.append(",");
				// sb.append("\r\n");
				// System.out.println("value: "+val);
			}
			sb.deleteCharAt(sb.length() - 1);
			sb.append("}");
			System.out.println(describe+":"+sb.toString());
		} else if (type == 1) {
			while (iter.hasNext()) {
				Entry entry = (Entry) iter.next();
				String key = (String) entry.getKey();
				String val = entry.getValue() + "";
				System.out.println(key + "=" + val);
				// sb.append("\r\n");
				// System.out.println("value: "+val);
			}
		} else if (type == 3) {
			StringBuilder sb = new StringBuilder();
			sb.append("{");
			while (iter.hasNext()) {
				Entry entry = (Entry) iter.next();
				String key = (String) entry.getKey();
				String val = entry.getValue() + "";
				sb.append(key + "=" + val);
				sb.append(",");
				// sb.append("\r\n");
				// System.out.println("value: "+val);
			}
			sb.deleteCharAt(sb.length() - 1);
			sb.append("}");
			System.out.println(describe+":"+sb.toString());
			// IOTool.log("shopinfo/stringutil/info.txt", sb.toString());
		} else if (type == 4) {
			while (iter.hasNext()) {
				Entry entry = (Entry) iter.next();
				String key = (String) entry.getKey();
				String val = entry.getValue() + "";
				// System.out.println(key+"="+val);
				if (val.indexOf("\"") != -1) {

					System.out.println("<input type=text name=\"" + key
							+ "\" value='" + val + "' />");
				} else {

					System.out.println("<input type=text name=\"" + key
							+ "\" value=\"" + val + "\" />");
				}
				// sb.append("\r\n");
				// System.out.println("value: "+val);
			}
		} else if (type == 5) {
			while (iter.hasNext()) {
				Entry entry = (Entry) iter.next();
				String key = (String) entry.getKey();
				String val = entry.getValue() + "";
				// System.out.println(key+"="+val);
				if (val.indexOf("\"") != -1) {
					val = val.replaceAll("\"", "\\\\\"");
				}
				// sb.append("\r\n");
				System.out.println("map.put(\"" + key + "\"," + "\"" + val
						+ "\");");
			}
		}
	}

	public static void printMapKey(String info, Map map) {
		Set entrySet = map.entrySet();
		Iterator iter = entrySet.iterator();
		StringBuffer sb = new StringBuffer();
		while (iter.hasNext()) {
			Entry entry = (Entry) iter.next();
			String key = (String) entry.getKey();
			sb.append(key);
			sb.append("  ");
		}
		System.out.println(info + "map内容: " + sb.toString());
	}

	public static void printMapKey(Map map) {
		Set entrySet = map.entrySet();
		Iterator iter = entrySet.iterator();
		StringBuffer sb = new StringBuffer();
		while (iter.hasNext()) {
			Entry entry = (Entry) iter.next();
			String key = (String) entry.getKey();
			sb.append(key);
			sb.append("  ");
		}
		System.out.println("map内容: " + sb.toString());
	}

	public static String getMD5(String source) {
		java.security.MessageDigest md = null;
		try {
			md = java.security.MessageDigest.getInstance("MD5");
			md.update(source.getBytes());
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		StringBuilder sb = new StringBuilder();
		for (byte b : md.digest()) {
			sb.append(String.format("%02X", b));
		}
		return sb.toString().toLowerCase();
	}

	public static String getMD5(byte[] bs) {
		java.security.MessageDigest md = null;
		try {
			md = java.security.MessageDigest.getInstance("MD5");
			md.update(bs);
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		StringBuilder sb = new StringBuilder();
		for (byte b : md.digest()) {
			sb.append(String.format("%02X", b));
		}
		return sb.toString().toLowerCase();
	}

	/**
	 * 数组中找重合的一个
	 * 
	 * @param arr1
	 * @param arr2
	 * @return
	 */
	public static String fetchSpecial(String[] arr1, String[] arr2) {
		String res = null;
		for (int i = 0; i < arr1.length; i++) {
			String a = arr1[i];
			for (int j = 0; j < arr2.length; j++) {
				String b = arr2[j];
				if (a.equals(b)) {
					res = a;
					break;
				}
			}
		}
		return res;
	}

	public static String[] propertiesToStrings(Properties props) {
		Set entrySet = props.entrySet();
		ArrayList<String> list = new ArrayList<String>();
		Iterator iter = entrySet.iterator();
		while (iter.hasNext()) {
			Entry entry = (Entry) iter.next();
			String key = (String) entry.getKey();
			String val = (String) entry.getValue();
			System.out.println("key: " + key);
			System.out.println("value: " + val);
			list.add(key);
		}
		String[] arrStr = new String[list.size()];
		return list.toArray(arrStr);
	}

	/**
	 * is读取字节
	 * 
	 * @param is
	 * @return
	 */
	public static byte[] getBytesFromInputStream(InputStream is) {
		if(is==null){
			return null;
		}
		byte[] rtnBytes = null;
		try {
			int num = is.available();
			rtnBytes = new byte[num];
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		if (is != null) {
			try {
				is.read(rtnBytes);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return rtnBytes;
	}

	/**
	 * 字节数组转换为某种编码的字符串
	 * 
	 * @param body
	 * @param charSet
	 * @return
	 */
	public static String byteArrayToString(byte[] body, String charSet) {
		try {
			return new String(body, charSet);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return null;
		}
	}

	// GENERAL_PUNCTUATION 判断中文的“号
	// CJK_SYMBOLS_AND_PUNCTUATION 判断中文的。号
	// HALFWIDTH_AND_FULLWIDTH_FORMS 判断中文的，号

	public static boolean isChinese(char c) {
		Character.UnicodeBlock ub = Character.UnicodeBlock.of(c);
		// System.out.println(ub);
		if (ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS
				|| ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS
				|| ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A
		// || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION
		// || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION
		// || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS

		) {
			return true;
		}
		return false;
	}

	public static boolean isChinese(String strName) {
		char[] ch = strName.toCharArray();
		for (int i = 0; i < ch.length; i++) {
			char c = ch[i];
			if (isChinese(c) == false) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumeric(String str) {
		for (int i = str.length(); --i >= 0;) {
			if (!Character.isDigit(str.charAt(i))) {
				return false;
			}
		}
		return true;
	}

	public static boolean containNumber(String str) {
		return str.matches(".*\\d+.*");
	}

	public static String regFileName(String str) {
		if (str == null) {
			return null;
		}
		String res = str.replaceAll("/", "").replaceAll("\\\\", "")
				.replaceAll(":", "").replaceAll("\\*", "")
				.replaceAll("\\?", "").replaceAll("\"", "").replaceAll("<", "")
				.replaceAll(">", "").replaceAll("\\|", "");
		return res;
	}

	public static void genKey(int beginNum, int num) {
		for (int i = beginNum; i < beginNum + num; i++) {
			String key = StringUtil.getRandomStr(25);
			System.out.println(key + "=" + i);
		}
	}

	public static void genKey2(int beginNum, int num) {
		for (int i = beginNum; i < beginNum + num; i++) {
			// String key = StringUtil.getRandomStr(25);
			String key = "qian" + i;
			System.out.println(key + "=" + i);
		}
	}
	
	public static String[] japanFirstnames = new String[] {"广瀬","古谷","饭岛","来栖","香田","蒲池","増田","美木","香坂","川村","市村","古屋","春野","小池","木内","石井","本上","牧野","秋元","彩瀬","水原","绮月","鮎川","池田","松冈","藤沢","宫内","堀内","嘉门","原","升水","小金沢","川瀬","真咲","浅川","朝吹"
					,"相川","小田","池脇","平山","加山","藤井","浅仓","堀","城源寺","哀川","川岛","菅野","叶立","绀野","五十岚","绫瀬","木田","弥永","平川","幸田","光冈","日野","河野","小室","千夏","池上","広畑","松田","久保田","小林","星川","石田","松坂","児岛","安达","美穂","北村","加纳","天宫","井野","相沢","江崎","益田"
					,"泉","南","松丸","栗原","国実","国府","小松","羽月","姫嶋","来宫","広田","朝比奈","槇原","古贺","浅井","平沢","入来","池乃内","前田","冬花","饭冢","希良梨","茜","浅冈","木下","藤田","美咲","片桐","早瀬","稲尾","宫崎","今村","春日","雏形","水树","栗山","浅野","叶月","松下","京野","川奈","石黒","秋津"
					,"北岛","青叶","安西","北原","细川","荒井","有沢","小杉","加藤","葵","丸山","赤堀","木村","叶山","深野","日向","花冈","藤崎","藤","日置","河合","本城","星野","黒沢","三井","仓持","仓石","北山","浅田","近藤","小岭","仓上","爱田","金子","相田","楠","藤森","井上","香山","知念","前园","花畑","益子","小西"
					,"秋山","北川","小岛","青木","一色","美保","松本","深田","早川","福沢","香川","矢田","河村","长谷","川野","木原","千叶","青岛","远藤","樋口","萩原","浅丘","万理","古村","浜田","三津谷","松岛","吹石","広瀬","石原","宫原","美吹","小山","広末","稲田","三津屋","小桥","北沢","麻生","国分","宫泽","三田","福冈"
					,"麻宫","朝仓","江川","金泽","君嶋","青山","桂木","加世","叶和","伊藤","赤井","小泉","国仲","真木","美崎","石山","浅见","飞鸟","浜丘","浜崎","菊池","藤原","黒田","黛","松","久保","小久保理沙","真岛","安藤","后藤","源氏","羽田","纯名","三崎","北野","江沢","榎本","神乃","本田","川崎","三上","早野","福田","饭洼"
					,"浅未","秋野","今井","神宫","片石","川上","朝冈","井出","三浦","込山","池野","栗林","工藤","久留须","伊吹","赤坂","平瀬","堀越","金沢","华原","今野","羽崎","江藤","原田","舞岛","深津","川浜","初音","相原"};
	
	
	public static String[] japanSecondnames = new String[]{"さくら","あすか","きょうこ","けいた","ちひろ","はじめ","いおり","はな","はるき","けいご","たろう","はるか","かいと","けいこ","ことね","あかね","かい","じゅん","さら","あらた","さや","ももこ","りくと","さとし","いつき","ももか","はづき","ななみ","ひなた","わたる"
					,"しょうた","じゅんこ","ともや","かずや","りょうた","たつや","かずま","ひとみ","さき","あゆむ","あさひ","あんな","あおい","りょうたろう","みさき","かりん","ゆう","ゆい","ひろと","ゆみこ","くみこ","ともこ","みゆう","やまと","かずき","けん","しおり","だいち","りゅうのすけ","さおり","ゆうだい","こはる","そら","だいき"
					,"あやの","あやね","ひびき","りんたろう","子-ななこ","かおる","かおり","あやこ","しゅんすけ","めぐみ","あやか","なお","ひかる","-なな","かのん","はやと","けんたろう","あいり","はやて","しゅん","けい","あん","れん","そう","もえ","けんと","ひより","えいた","しょう","あや","のりこ","けんた","あみ","いぶき","てつや"
					,"りょう","みわ","こころ","さちこ","みゆ","かんた","まゆみ","めい","あいこ","いちろう","みほ","とおる","だいすけ","たいよう","なおみ","かえで","そうた","なつき","りん","まゆ","しゅう","るな","なおと","ちなつ","あい","まほ","ゆうま","じん","ひな","りゅう","つかさ","つばさ","りほ","みく","みき","みか","まな"
					,"みお","なおこ","こうた","さくらこ","みう","ゆうな","りの","ゆうと","しんたろう","なおき","ようた","りな","わかな","つよし","みずき","まこと","ゆうた","たいち","ようこ","けんいち","ゆたか","あずさ","たくや","ゆうこ","かける","まお","たくみ","りこ","たくま","ゆうき","ゆうか","まい","りく","たいが","りお","りえ"
					,"まなみ","れいな","はる","かな","あきこ","こたろう","はるな","まなぶ","はると","みづき","たくと"};
	
	public static String getJapanFirstname(){
		return StringUtil.getRandomStrFromArr(japanFirstnames);
	}
	public static String getJapanSecondname(){
		return StringUtil.getRandomStrFromArr(japanSecondnames);
	}
	
	public static String getJapanPhone(){
		return StringUtil.getRandomStrFromArr(new String[]{"080","090"})+StringUtil.getRandomNumStr(8);
	}
	
	

	public static String getBase64(String s) {
		if (s == null)
			return null;
		return null;
	}

	public static String getBase64(byte[] bs) {
		if (bs == null)
			return null;
		return null;
	}

	// 将 BASE64 编码的字符串 s 进行解码
	public static String getFromBASE64(String s) {
		if (s == null)
			return null;
		/*BASE64Decoder decoder = new BASE64Decoder();
		try {
			byte[] b = decoder.decodeBuffer(s);
			return new String(b);
		} catch (Exception e) {
			return null;
		}*/
		return null;
	}

	public static byte[] getBytesFromBASE64(String s) {
		if (s == null)
			return null;
		/*BASE64Decoder decoder = new BASE64Decoder();
		try {
			byte[] b = decoder.decodeBuffer(s);
			return b;
		} catch (Exception e) {
			return null;
		}*/
		return null;
	}

	private static final String[] id_one = { "1", "2", "3", "4", "5", "6", "7",
			"8" };
	private static final String[] id_two = { "1", "2", "3", "4", "5", "6", "7",
			"8" };
	private static final String[] id_four = { "1", "2", "3", "4", "5", "6", "7" };
	private static final String[] id_five = { "1", "2" };
	private static final String[] id_six = { "1", "2", "3", "4" };

	public static String getRandomBirth() {
		int now = 2011;
		Random random = new Random();
		int t = random.nextInt(50);
		return String.valueOf(now - t);
	}

	public static String getRandomMonth() {
		Random random = new Random();
		int t = random.nextInt(12);
		if (t < 9) {
			return "0" + (t + 1);
		} else {
			return String.valueOf(t + 1);
		}
	}

	public static String getRandomDay() {
		Random random = new Random();
		int t = random.nextInt(28);
		if (t < 9) {
			return "0" + (t + 1);
		} else {
			return String.valueOf(t + 1);
		}
	}

	public static String getRandomIdCard() {
		return StringUtil.getRandomStrFromArr(id_one)
				+ StringUtil.getRandomStrFromArr(id_two) + "0"
				+ StringUtil.getRandomStrFromArr(id_four)
				+ StringUtil.getRandomStrFromArr(id_five)
				+ StringUtil.getRandomStrFromArr(id_six) + getRandomBirth()
				+ getRandomMonth() + getRandomDay()
				+ StringUtil.getRandomNumStr(4);
	}

	public static boolean isAz(String str) {
		// Pattern pattern = Pattern.compile("[a-z]");
		return str.matches("[0-9A-Za-z]*");

	}

	public static String getQQEncodePwd(String pwd, String md5Str,
			String verifycode) {
		// System.out.println(getMD5(pwd)+md5Str);
		byte[] bs = hexchar2bin(getMD5(pwd) + md5Str);
		String h = getMD5(bs);
		// System.out.println("h:"+h);
		String encodePwd = getMD5(h.toUpperCase() + verifycode.toUpperCase());
		return encodePwd;
	}

	public static String getQQWomaiEncodePwd(String pwd, String uin,
			String verifycode) {
		// System.out.println(getMD5(pwd)+md5Str);
		byte[] bs = hexchar2bin(getMD5(pwd) + uin);
		String h = getMD5(bs);
		// String h = getMD5(getMD5(pwd)+uin);
		System.out.println("h:" + h);
		String encodePwd = getMD5(h.toUpperCase() + verifycode.toUpperCase());
		return encodePwd.toUpperCase();
	}

	public static byte[] hexchar2bin(String hex) {
		byte[] bs = new byte[hex.length() / 2];
		int j = 0;
		for (int i = 0; i < hex.length(); i = i + 2) {
			String temp = hex.substring(i, i + 2);
			int in = Integer.parseInt(temp, 16);
			// System.out.println((char)in);
			bs[j++] = (byte) in;
		}
		return bs;
	}

	// function hexchar2bin(str) {
	// var arr = [];
	// for (var i = 0; i < str.length; i = i + 2) {
	// arr.push("\\x" + str.substr(i, 2))
	// }
	// arr = arr.join("");
	// eval("var temp = '" + arr + "'");
	// return temp
	// }

	public static String decode(String bytes) {
		ByteArrayOutputStream baos = new ByteArrayOutputStream(
				bytes.length() / 2);
		// 将每2位16进制整数组装成一个字节
		for (int i = 0; i < bytes.length(); i += 2)
			baos.write((hexString.indexOf(bytes.charAt(i)) << 4 | hexString
					.indexOf(bytes.charAt(i + 1))));
		return new String(baos.toByteArray());
	}

	private static String hexString = "0123456789ABCDEF";

	public static String encode(String str) {
		// 根据默认编码获取字节数组
		byte[] bytes = str.getBytes();
		StringBuilder sb = new StringBuilder(bytes.length * 2);
		// 将字节数组中每个字节拆解成2位16进制整数
		for (int i = 0; i < bytes.length; i++) {
			sb.append(hexString.charAt((bytes[i] & 0xf0) >> 4));
			sb.append(hexString.charAt((bytes[i] & 0x0f) >> 0));
		}
		return sb.toString();
	}

	// 转化十六进制编码为字符串
	public static String toStringHex(String s) {
		byte[] baKeyword = new byte[s.length() / 2];
		for (int i = 0; i < baKeyword.length; i++) {
			try {
				baKeyword[i] = (byte) (0xff & Integer.parseInt(
						s.substring(i * 2, i * 2 + 2), 16));
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		try {
			s = new String(baKeyword, "utf-8");// UTF-16le:Not
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		return s;
	}

	public static String bytesToHexString(byte[] src) {
		StringBuilder stringBuilder = new StringBuilder("");
		if (src == null || src.length <= 0) {
			return null;
		}
		for (int i = 0; i < src.length; i++) {
			int v = src[i] & 0xFF;
			String hv = Integer.toHexString(v);
			if (hv.length() < 2) {
				stringBuilder.append(0);
			}
			stringBuilder.append(hv);
		}
		return stringBuilder.toString();
	}

	public static byte[] hexStringToBytes(String hexString) {
		if (hexString == null || hexString.equals("")) {
			return null;
		}
		hexString = hexString.toUpperCase();
		int length = hexString.length() / 2;
		char[] hexChars = hexString.toCharArray();
		byte[] d = new byte[length];
		for (int i = 0; i < length; i++) {
			int pos = i * 2;
			d[i] = (byte) (charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));
		}
		return d;
	}

	private static byte charToByte(char c) {
		return (byte) "0123456789ABCDEF".indexOf(c);
	}

	// public static

	public static double getRandomVal(double max) {
		int dealNum = (int) (Math.random() * (int) max * 100);
		double radom = dealNum / 100.0;
		return radom;
	}

	public static String getRandom() {
		String s = String.valueOf(Math.random());
		// Random random = new Random();
		// String s = random.toString();
		return s;
	}

	public static String getRound() {
		String s = String.valueOf(Math.round(Math.random() * 1000));
		// Random random = new Random();
		// String s = random.toString();
		return s;
	}

	public static String convertString(String unicode) {
		String utf8 = null;
		try {
			// utf8 = new String(unicode.getBytes( "GBK"), "UTF-8");
			// utf8 = new String(unicode.getBytes( "UTF-8"), "GBK");
			// utf8 = new String(unicode.getBytes( "ISO-8859-1"), "GBK");
			// utf8 = new String(unicode.getBytes( "GBK"), "ISO-8859-1");
			utf8 = new String(unicode.getBytes("ISO-8859-1"), "UTF-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return utf8;

	}

	public static String getSpeEncodeStr(String oriStr) {
		String res = StringUtil.encode(oriStr, "UTF-8");
		String rtnRes = res.replaceAll("25", "");
		return rtnRes;
	}

	public static String getRandomStr() {
		String orignal = "123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		Random random = new Random();
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < 6; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return sb.toString();
	}

	public static String getRandomPwd() {
		String orignal = "123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		Random random = new Random();
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();

		int len = random.nextInt(10);
		if (len < 6) {
			len = len + 6;
		}

		for (int i = 0; i < len; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return sb.toString();
	}

	public static String getRandomNumCharPwd() {
		String numStr = "0123456789";
		Random random = new Random();
		int length = numStr.length();
		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < 6; i++) {
			int pos = random.nextInt(length);
			char c = numStr.charAt(pos);
			sb.append(c);
		}

		String upperStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		int pos = random.nextInt(upperStr.length());
		char c = upperStr.charAt(pos);
		sb.append(c);

		String littleStr = "abcdefghijklmnopqrstuvwxyz";
		pos = random.nextInt(littleStr.length());
		c = littleStr.charAt(pos);
		sb.append(c);
		return sb.toString();
	}
	
	public static final String[] japanZipcode = new String[]{"197-0804","190-0155","197-0827","197-0825","190-0164","190-0142","190-0161"
												,"190-0143","197-0826","132-0024","134-0092","134-0082","132-0013","134-0013","132-0022","133-0042","133-0041","133-0054",
												"186-0013","186-0014","186-0012","186-0001","186-0004","186-0005","186-0002","186-0003","186-0011","187-0001","187-0031","187-0035"
												,"187-0032","187-0043","187-0045","187-0044","187-0034","1187-0023"}; 
	public static String getRandomJapanPostcode(){
		return StringUtil.getRandomStrFromArr(japanZipcode);
	}
	
	public static String getRandomBirthday(){
		String year = StringUtil.getRandomNum(1965, 30)+"";
		int month = StringUtil.getRandomNum(1, 11);
		String monthStr = null;
		if(month<10){
			monthStr = "0"+month;
		}else{
			monthStr = month +"";
		}
		int day = StringUtil.getRandomNum(1,27); 
		String dayStr = null;
		if(day<10){
			dayStr = "0"+day;
		}else{
			dayStr = day+"";
		}
		return year+"/"+monthStr+"/"+dayStr;
	}
	
	public static String getRandomMixNumCharPwd() {
		String numStr = "0123456789";
		Random random = new Random();
		int length = numStr.length();
		StringBuffer sb = new StringBuffer();
		if(halfRate()){
			int poss = random.nextInt(length);
			char cc = numStr.charAt(poss);
			sb.append(cc);
		}
		for (int i = 0; i < 3; i++) {
			int pos = random.nextInt(length);
			char c = numStr.charAt(pos);
			sb.append(c);
		}
		String upperStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		String littleStr = "abcdefghijklmnopqrstuvwxyz";
		int posl = random.nextInt(upperStr.length());
		char ca = 0;
		if(halfRate()){
			ca = upperStr.charAt(posl);
		}else{
			ca = littleStr.charAt(posl);
		}
		sb.append(ca);
		
		if(halfRate()){
			int poss = random.nextInt(length);
			char cc = numStr.charAt(poss);
			sb.append(cc);
		}
		
		for (int i = 0; i < 3; i++) {
			int poss = random.nextInt(length);
			char cc = numStr.charAt(poss);
			sb.append(cc);
		}
		
		int pos = random.nextInt(littleStr.length());
		if(halfRate()){
			ca = littleStr.charAt(pos);
		}else{
			ca = upperStr.charAt(pos);
		}
		sb.append(ca);
		return sb.toString();
	}

	public static String getRandomSimplePwd() {
		String orignal = "0123456789";
		Random random = new Random();
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();

		int len = random.nextInt(10);
		if (len < 6) {
			len = len + 6;
		}

		for (int i = 0; i < len; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		String pwd = sb.toString();
		if (pwd.length() > 6) {
			pwd = pwd.substring(0, 6);
		}
		return pwd;
	}

	public static String getRandomDifUserName() {
		String orignal = "123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		Random random = new Random();
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();

		int len = random.nextInt(10);
		if (len < 8) {
			len = len + 5;
		}

		for (int i = 0; i < len; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return sb.toString();
	}

	public static String getSpecialUserName() {
		String orignal = "123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		Random random = new Random();
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();

		int len = random.nextInt(16);
		if (len < 11) {
			len = len + 9;
		}
		if (len >= 18) {
			len = 18;
		}
		if (len <= 10) {
			len = 10;
		}
		for (int i = 0; i < len; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return sb.toString();
	}

	public static String getRandomUserName() {
		String orignal = "123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		Random random = new Random();
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();

		int len = random.nextInt(10);
		if (len < 10) {
			len = len + 8;
		}

		for (int i = 0; i < len; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return sb.toString();
	}

	public static String getRandomNumStrMax(int max) {
		String orignal = "123456789";
		Random random = new Random();
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();

		int thisNum = random.nextInt(max + 1);
		if (thisNum == 0) {
			thisNum = 2;
		}

		for (int i = 0; i < thisNum; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return sb.toString();
	}

	public static String getSpecialEmail() {
		String preName = getSpecialUserName();
		// String[] dot = new
		// String[]{"@163.com","@sohu.com","@126.com","@yeah.net","@sina.com.cn","@hotmail.com","@yahoo.com.cn"};
		// String[] dot = new String[]{"@163.com"};
		// String com = getRadomStrFromArr(dot);
		return preName + "@163.com";
	}

	public static String getRandomEmail() {
		String preName = getRandomUserName();
		// String[] dot = new
		// String[]{"@163.com","@sohu.com","@126.com","@yeah.net","@sina.com.cn","@hotmail.com","@yahoo.com.cn"};
		String[] dot = new String[] { "@163.com", "@sohu.com", "@126.com" };
		String com = getRandomStrFromArr(dot);
		return preName + com;
	}

	public static String getRandom163Email() {
		String preName = getRandomUserName();
		// String[] dot = new
		// String[]{"@163.com","@sohu.com","@126.com","@yeah.net","@sina.com.cn","@hotmail.com","@yahoo.com.cn"};
		// String[] dot = new String[] { "@163.com"};
		String com = "@163.com";
		return preName + com;
	}

	public static String getRandomTempEmail() {
		String preName = getRandomUserName();
		String[] dot = new String[] { "@chala1.com", "@xiaohaha.com",
				"@itenv.com", "@musilaseg.net", "@helasete.com.cn",
				"@tssuvt.com", "@miiimu.com.cn" };
		String com = StringUtil.getRandomStrFromArr(dot);
		return preName + com;
	}

	public static String getRandomNumEmail() {
		String preName = getRandomNumStr(9);
		// String[] dot = new
		// String[]{"@163.com","@sohu.com","@126.com","@yeah.net","@sina.com.cn","@hotmail.com","@yahoo.com.cn"};
		String[] dot = new String[] { "@163.com", "@sohu.com", "@126.com",
				"@yeah.net", "@qq.com" };
		String com = getRandomStrFromArr(dot);
		return preName + com;
	}

	public static String getRandomDifEmail() {
		String preName = getRandomDifUserName();
		// String[] dot = new
		// String[]{"@163.com","@sohu.com","@126.com","@yeah.net","@sina.com.cn","@hotmail.com","@yahoo.com.cn"};
		String[] dot = new String[] { "@163.com", "@126.com", "@yeah.net" };
		String com = getRandomStrFromArr(dot);
		return preName + com;
	}

	public static String getRandomUsePhone() {
		Random random = new Random();
		String[] headNum = new String[] { "181", "183", "184", "154", "146",
				"149" };
		int position = random.nextInt(headNum.length);
		String head = headNum[position];

		String orignal = "0123456789";
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < 8; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return head + sb.toString();
	}
	
	public static String getRandomUseSpecialPhone() {
		Random random = new Random();
		String[] headNum = new String[] {"184", "154", "146",
		"149","135", "136", "159", "137", "139",
		"133", "132", "131", "130"};
		int position = random.nextInt(headNum.length);
		String head = headNum[position];
		
		StringBuffer sb = new StringBuffer();
		int first = 0;
		int first2 = 0;
		//总共8位 1、2是连续两个数字   3、4是 随机数  5、6是7、8的乘  7、8也是连续两个数字
		first =  StringUtil.getRandomNum(1, 8);
		sb.append(first);
		int sec = 0;
		if(halfRate()){
			sec=first+1;
		}else{
			sec=first-1;
		}
		sb.append(sec);
		int three = StringUtil.getRandomNum(0, 9);
		int four = StringUtil.getRandomNum(0, 9);
		sb.append(three);
		sb.append(four);
		int sev = StringUtil.getRandomNum(1, 8);
		int eight = 0;
		if(halfRate()){
			eight=sev+1;
		}else{
			eight=sev-1;
		}
		int fiveSix = three*four;
		if(fiveSix==0){
			int rad = StringUtil.getRandomNum(4, 6);
			fiveSix = rad*rad;
		}
		String fiveSixStr = StringUtil.intToRegString(fiveSix, 2);
		sb.append(fiveSixStr);
		sb.append(sev);
		sb.append(eight);
		return head + sb.toString();
	}
	public static String getRandomUseSpecialPhone2() {
		Random random = new Random();
		String[] headNum = new String[] {"184", "154", "146",
		"149" };
		int position = random.nextInt(headNum.length);
		String head = headNum[position];
		
		String orignal = "0123456789";
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < 8; i++) {
			if(i==0 || i==1 ){
				sb.append("22");
				continue;
			}
			if(i==6 ){
				sb.append("3");
				continue;
			}
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return head + sb.toString();
	}

	public static String getRandomUnUsePhone() {
		Random random = new Random();
		String[] headNum = new String[] { "184", "154", "146", "149" };
		int position = random.nextInt(headNum.length);
		String head = headNum[position];

		String orignal = "0123456789";
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < 8; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return head + sb.toString();
	}

	public static String getRandomPhone() {
		Random random = new Random();
		String[] headNum = new String[] { "135", "136", "159", "137", "139",
				"133", "132", "131", "130" };
		int position = random.nextInt(headNum.length);
		String head = headNum[position];

		String orignal = "0123456789";
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < 8; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return head + sb.toString();
	}

	public static String getRandomPhone2() {
		Random random = new Random();
		String orignal = "0123456789";
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < 6; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		String phone = "147" + sb.toString()
				+ StringUtil.getRandomStrFromArr(new String[] { "99", "77" });

		return phone;
	}

	public static String getRandomStr(int num) {
		String orignal = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		Random random = new Random();
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < num; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return sb.toString();
	}

	public static String getRandomFixUsername(int num) {
		String orignal = "123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		Random random = new Random();
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < num; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return sb.toString();
	}

	public static String getRandomNumStr(int num) {
		String orignal = "1234567890";
		Random random = new Random();
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < num; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return sb.toString();
	}

	public static String getRandomKeyFromProps(Map props) {
		int size = props.size();
		if (size <= 0) {
			return null;
		}
		Set se = props.keySet();
		Object[] arr = (Object[]) se.toArray();
		Random random = new Random();
		int pos = random.nextInt(size);
		// return arr[pos];
		return (String) (arr[pos]);
	}

	public static String getRandomStrFromArr(String[] arr) {
		Random random = new Random();
		int length = arr.length;
		int pos = random.nextInt(length);
		return arr[pos];
	}

	public static int getRandomNumFromArr(int[] arr) {
		Random random = new Random();
		int length = arr.length;
		int pos = random.nextInt(length);
		return arr[pos];
	}

	public static String encode(String message, String charSet) {
		String res = null;
		// URLEncoder encoder = new URLEncoder();
		try {
			res = URLEncoder.encode(message, charSet);
			// res = res.replaceAll("\\+", "%20");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return res;
	}

	/**
	 * 解码
	 * 
	 * @param message
	 * @param charSet
	 * @return
	 */
	public static String decode(String message, String charSet) {
		String res = null;
		URLDecoder decoder = new URLDecoder();
		try {
			res = decoder.decode(message, charSet);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return res;
	}

	public static String getRandomVal() {
		double val = Math.random();
		return String.valueOf(val);
	}

	public static String getRandomVal(int max) {
		double val = Math.random() * max;
		return String.valueOf(val);
	}

	public static long getRandomValLong(int max) {
		long val = (long) (Math.random() * max);
		return val;
	}

	public static int getRandomNum(int max) {
		Random random = new Random();
		int pos = random.nextInt(max);
		return pos;
	}

	public static int getRandomNum(int base, int add) {
		Random random = new Random();
		int pos = random.nextInt(add);
		return pos + base;
	}

	public static String getRadomValGome() {
		double val = Math.random() * 10000000;
		return String.valueOf(Math.round(val));
	}

	public static String getNowDateTime() {
		Date date = new Date();
		long time = date.getTime();
		return String.valueOf(time);
	}

	/**
	 * 编码 别处拷贝
	 * 
	 * @param src
	 * @return
	 */
	public static String escape(String src) {
		int i;
		char j;
		StringBuffer tmp = new StringBuffer();
		tmp.ensureCapacity(src.length() * 6);
		for (i = 0; i < src.length(); i++) {
			j = src.charAt(i);
			if (Character.isDigit(j) || Character.isLowerCase(j)
					|| Character.isUpperCase(j))
				tmp.append(j);
			else if (j < 256) {
				tmp.append("%");
				if (j < 16)
					tmp.append("0");
				tmp.append(Integer.toString(j, 16));
			} else {
				tmp.append("%u");
				tmp.append(Integer.toString(j, 16));
			}
		}
		return tmp.toString();
	}

	// public static String getNextStr(String oriStr){
	// String orignal =
	// "123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	//
	// }

	/**
	 * 数字变成规则的字符串 比如1变成0001
	 */
	public static String intToRegString(int i, int len) {
		String str = String.valueOf(i);
		int length = str.length();
		if (length >= len) {
			return str;
		}
		int fillLen = len - length;
		String content = "";
		for (int k = 0; k < fillLen; k++) {
			content += "0";
		}
		return content + str;
	}

	public static String toUnicode(String theString, boolean escapeSpace) {
		int len = theString.length();
		int bufLen = len * 2;
		if (bufLen < 0) {
			bufLen = Integer.MAX_VALUE;
		}
		StringBuffer outBuffer = new StringBuffer(bufLen);

		for (int x = 0; x < len; x++) {
			char aChar = theString.charAt(x);
			// Handle common case first, selecting largest block that
			// avoids the specials below
			if ((aChar > 61) && (aChar < 127)) {
				if (aChar == '\\') {
					outBuffer.append('\\');
					outBuffer.append('\\');
					continue;
				}
				outBuffer.append(aChar);
				continue;
			}
			switch (aChar) {
			case ' ':
				if (x == 0 || escapeSpace)
					outBuffer.append('\\');
				outBuffer.append(' ');
				break;
			case '\t':
				outBuffer.append('\\');
				outBuffer.append('t');
				break;
			case '\n':
				outBuffer.append('\\');
				outBuffer.append('n');
				break;
			case '\r':
				outBuffer.append('\\');
				outBuffer.append('r');
				break;
			case '\f':
				outBuffer.append('\\');
				outBuffer.append('f');
				break;
			case '=': // Fall through
			case ':': // Fall through
			case '#': // Fall through
			case '!':
				outBuffer.append('\\');
				outBuffer.append(aChar);
				break;
			default:
				if ((aChar < 0x0020) || (aChar > 0x007e)) {
					outBuffer.append('\\');
					outBuffer.append('u');
					outBuffer.append(toHex((aChar >> 12) & 0xF));
					outBuffer.append(toHex((aChar >> 8) & 0xF));
					outBuffer.append(toHex((aChar >> 4) & 0xF));
					outBuffer.append(toHex(aChar & 0xF));
				} else {
					outBuffer.append(aChar);
				}
			}
		}
		return outBuffer.toString();
	}

	private static final char[] hexDigit = { '0', '1', '2', '3', '4', '5', '6',
			'7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };

	private static char toHex(int nibble) {
		return hexDigit[(nibble & 0xF)];
	}

	public static String formatArrayStr(String[] arr) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < arr.length; i++) {
			sb.append(arr[i].replaceAll("\r", "").replaceAll("\n", "").trim());
			sb.append("    ");
		}
		return sb.toString().trim();
	}

	public static String mapToUrlStr(Map<String, String> map) {
		Set keySet = map.entrySet();
		Iterator iter = keySet.iterator();
		StringBuffer sb = new StringBuffer("?");
		while (iter.hasNext()) {
			Entry entry = (Map.Entry) iter.next();
			String key = ((String) (entry.getKey())).trim();

			String val = ((String) (entry.getValue()));
			if (val == null) {
				val = "";
			}
			val = val.trim();
			sb.append(key);
			sb.append("=");
			sb.append(val);
			sb.append("&");
		}
		String paras = sb.toString();
		paras = paras.substring(0, paras.length() - 1);
		return paras;
	}

	public static String unicodeDecode(String strText) {
		if (strText == null) {
			return null;
		}
		StringBuilder sb = new StringBuilder();
		int i = 0;
		char c;
		while (i < strText.length()) {
			c = strText.charAt(i);
			if (c == '\\' && (i + 1) != strText.length()
					&& strText.charAt(i + 1) == 'u') {
				sb.append((char) Integer.parseInt(
						strText.substring(i + 2, i + 6), 16));
				i += 6;
			} else {
				sb.append(c);
				i++;
			}
		}
		return sb.toString();
	}

	public static String transformStrCode(String res, String oriCode,
			String targCode) {
		String result = null;
		try {
			result = new String(res.getBytes(oriCode), targCode);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return result;

	}

	public static String getSpecRandomUserName() {
		String orignal = "abcdefghijklmnopqrstuvwxyz";
		Random random = new Random();
		int length = orignal.length();
		StringBuffer sb = new StringBuffer();

		int len = random.nextInt(10);
		if (len < 6) {
			len = len + 5;
		}

		for (int i = 0; i < len; i++) {
			int pos = random.nextInt(length);
			char c = orignal.charAt(pos);
			sb.append(c);
		}
		return sb.toString();
	}

	public static String getNextFromArr(String[] arr, int i) {
		String next = null;
		if (i >= arr.length) {
			next = arr[i % arr.length];
		} else {
			next = arr[i];
		}
		return next;
	}

	public static String streamToString(InputStream is, String charSet) {
		StringBuffer sb = new StringBuffer();
		BufferedReader br = null;
		try {
			br = new BufferedReader(new InputStreamReader(is, charSet));
		} catch (UnsupportedEncodingException e1) {
			e1.printStackTrace();
		}
		String tempStr = null;
		try {
			while ((tempStr = br.readLine()) != null) {
				// System.out.println(tempStr);
				sb.append(tempStr);
				sb.append("\r\n");
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return sb.toString();
	}

	// http://shop.jiatx.com/miaosha/miaosha_31678/

	private static int charCodeAt(String str, int pos) {
		char s = str.charAt(pos);
		int res = (int) s;
		return res;
	}

	public static String getFeihuPwd(String pwd) {
		String info = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
		String $0;
		int $1, $2;
		int $3, $4, $5;
		$2 = pwd.length();
		$1 = 0;
		$0 = "";
		while ($1 < $2) {
			$3 = charCodeAt(pwd, $1++) & 255;
			if ($1 == $2) {
				$0 += info.charAt($3 >> 2);
				$0 += info.charAt(($3 & 3) << 4);
				$0 += "==";
				break;
			}
			$4 = charCodeAt(pwd, $1++);
			if ($1 == $2) {
				$0 += info.charAt($3 >> 2);
				$0 += info.charAt((($3 & 3) << 4) | (($4 & 240) >> 4));
				$0 += info.charAt(($4 & 15) << 2);
				$0 += '=';
				break;
			}
			$5 = charCodeAt(pwd, $1++);
			$0 += info.charAt($3 >> 2);
			$0 += info.charAt((($3 & 3) << 4) | (($4 & 240) >> 4));
			$0 += info.charAt((($4 & 15) << 2) | (($5 & 192) >> 6));
			$0 += info.charAt($5 & 63);
		}
		return $0;
	}

	/**
	 * @deprecated Use {@link #sys(String,String,String)} instead
	 */
	public static String sys(String res) {
		if (res == null) {
			return null;
		}
		return sys(res, "ISO-8859-1", "UTF-8");
	}

	public static String sys(String res, String getEncoding, String toEncoding) {
		if (res == null) {
			return null;
		}
		String rtnRes = null;
		try {
			// String rs = new String(res.getBytes("ISO-8859-1"),"UTF-8");
			// rtnRes = new String(res.getBytes("ISO-8859-1"),"gb2312");
			rtnRes = new String(res.getBytes(getEncoding), toEncoding);
			// System.out.println(rs);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			return null;
		}
		return rtnRes;
	}

	// id=284432f76aeb2ff5eb51372950740163:lv=1372950740163:ss=1372950740163
	public static String getLufaxString() {
		String co_f = "2";
		String cur = String.valueOf(new Date().getTime());
		for (int i = 2; i <= (32 - cur.length()); i++) {
			int rd = (int) Math.floor(Math.random() * 16.0);
			String hex = Integer.toHexString(rd);
			co_f += hex;
		}
		co_f += cur;
		String faxStr = "id=" + co_f + ":lv=" + cur + ":ss=" + cur;
		System.out.println("WT-FPC:" + faxStr);
		return faxStr;
	}

	/**
	 * 判断文件是否为图片文件(GIF,PNG,JPG)
	 * 
	 * @param srcFileName
	 * @return
	 */
	public static boolean isImage(byte[] bs) {
		if (bs == null) {
			return false;
		}
		if (bs.length < 10) {
			return false;
		}
		byte b0 = bs[0];
		byte b1 = bs[1];
		byte b2 = bs[2];
		byte b3 = bs[3];
		byte b6 = bs[6];
		byte b7 = bs[7];
		byte b8 = bs[8];
		byte b9 = bs[9];
		// temp-begin
		// for(int i=0;i<bs.length;i++){
		// System.out.print(i+"-"+(char)bs[i]);
		// }
		// System.out.println();
		// temp-end
		if (b0 == (byte) 'G' && b1 == (byte) 'I' && b2 == (byte) 'F') {
			return true;
		} else if (b1 == (byte) 'P' && b2 == (byte) 'N' && b3 == (byte) 'G') {
			return true;
		} else if (b6 == (byte) 'J' && b7 == (byte) 'F' && b8 == (byte) 'I'
				&& b9 == (byte) 'F') {
			return true;
		} else {
			// PNG 特殊
			byte b16 = bs[16];
			byte b17 = bs[17];
			byte b18 = bs[18];
			if (b16 == (byte) 'P' && b17 == (byte) 'N' && b18 == (byte) 'G') {
				return true;
			}

			return false;
		}
	}

	public static boolean isEmpty(String str) {
		if (str == null || "".equals(str.trim())) {
			return true;
		}
		return false;
	}

	/**
	 * map里的参数组装成get请求的url
	 * 
	 * @param url
	 * @param map
	 * @return
	 */
	public static String mapParasToUrl(String url, Map map) {
		if (map == null) {
			return url;
		}
		StringBuffer sb = new StringBuffer();
		Set entrySet = map.entrySet();
		Iterator iter = entrySet.iterator();
		while (iter.hasNext()) {
			Entry entry = (Entry) iter.next();
			String key = (String) entry.getKey();
			String val = (String) entry.getValue();
			sb.append("&");
			sb.append(key);
			sb.append("=");
			if (val != null) {
				// sb.append(StringUtil.encode(val,"GBK"));
				sb.append(val);
			}
		}
		String visitUrl = null;
		if (url.indexOf("?") == -1) {
			sb.deleteCharAt(0);
			visitUrl = url + "?" + sb.toString();
		} else {
			visitUrl = url + sb.toString();
		}
		return visitUrl;
	}

	public static String inputText() {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String inStr = null;
		System.out.print("输入【文本】信息:");
		try {
			inStr = br.readLine();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		System.out.println("输入的【文本】信息为：" + inStr);
		return inStr;
	}
	public static Properties containLatterProps(Properties aProps,Properties bProps){
		Properties rtnProps = new Properties();
		Set entries = aProps.entrySet();
		Iterator iter=null;
		iter = entries.iterator();
		while(iter.hasNext()){
			Map.Entry<String,String> entry = (Map.Entry<String,String>)iter.next();
			String key = entry.getKey().trim();
			String val = entry.getValue().trim();
			//b文件中能找到的，不需要，只取b文件中没有的
			if(bProps.get(key)!=null){
				rtnProps.put(key, val);
			}
		}
		return rtnProps;
	}
	public static Map cutLatterMap(Map aMap,Map bMap){
		if(aMap==null){
			return null;
		}
		if(bMap==null || bMap.size()==0){
			return aMap;
		}
		Map rtnMap = new Hashtable();
		Set entries = aMap.entrySet();
		Iterator iter = null;
		iter = entries.iterator();
		while(iter.hasNext()){
			Entry entry = (Entry) iter.next();
			String key = (String)entry.getKey();
			Object val = entry.getValue();
			if(bMap.get(key)==null){
				rtnMap.put(key, val);
			}
		}
		return rtnMap;
	}

	public static Properties cutLatterProps(Properties aProps, Properties bProps) {
		if (aProps == null) {
			return null;
		}
		if (bProps == null || bProps.size() == 0) {
			return aProps;
		}
		Properties rtnProps = new Properties();
		Set entries = aProps.entrySet();
		Iterator iter = null;
		iter = entries.iterator();
		while (iter.hasNext()) {
			Map.Entry<String, String> entry = (Map.Entry<String, String>) iter
					.next();
			String key = entry.getKey().trim();
			String val = entry.getValue().trim();
			// b文件中能找到的，不需要，只取b文件中没有的
			if (bProps.get(key) == null) {
				rtnProps.put(key, val);
			}
		}
		return rtnProps;
	}

	public static String getSha(String str) {
		MessageDigest md;
		try {
			md = MessageDigest.getInstance("SHA-1");
			try {
				md.update(str.getBytes("UTF-8"));
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			byte[] result = md.digest();
			StringBuffer sb = new StringBuffer();
			for (byte b : result) {
				int i = b & 0xff;
				if (i < 0xf) {
					sb.append(0);
				}
				sb.append(Integer.toHexString(i));
			}
			return sb.toString();
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	public static String bytes2Hex(byte[] bts) {
		String des = "";
		String tmp = null;
		for (int i = 0; i < bts.length; i++) {
			tmp = (Integer.toHexString(bts[i] & 0xFF));
			if (tmp.length() == 1) {
				des += "0";
			}
			des += tmp;
		}
		return des;
	}

	public static String KEY_MAC = "";

	/**
	 * 初始化HMAC密钥
	 * 
	 * @return
	 * @throws Exception
	 */
	public static String initMacKey() throws Exception {
		KeyGenerator keyGenerator = KeyGenerator.getInstance(KEY_MAC);
		SecretKey secretKey = keyGenerator.generateKey();
		return encryptBASE64(secretKey.getEncoded());
	}

	/**
	 * HMAC 加密
	 * 
	 * @param data
	 * @param key
	 * @return
	 * @throws Exception
	 */
	public static byte[] encryptHMAC(byte[] data, String key) throws Exception {
		SecretKey secretKey = new SecretKeySpec(decryptBASE64(key), KEY_MAC);
		Mac mac = Mac.getInstance(secretKey.getAlgorithm());
		mac.init(secretKey);
		return mac.doFinal(data);
	}

	public static String getHMAC(String str, String key0) {
		try {
			KEY_MAC = key0;
			String key = initMacKey();
			System.out.println("HMAC密匙:" + key);
			byte[] c = encryptHMAC(str.getBytes(), key);
			String rtnStr = new BigInteger(c).toString(16);
			System.out.println("HMAC  加密后:" + rtnStr);
			return rtnStr;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * BASE64解密
	 * 
	 * @param key
	 * @return
	 * @throws Exception
	 */
	public static byte[] decryptBASE64(String key) throws Exception {
		return null;
	}

	public static String encryptBASE64(byte[] key) throws Exception {
		return null;
	}

	private static final String MAC_NAME = "HmacSHA1";
	private static final String ENCODING = "UTF-8";

	/*
	 * 展示了一个生成指定算法密钥的过程 初始化HMAC密钥
	 * 
	 * @return
	 * 
	 * @throws Exception
	 * 
	 * public static String initMacKey() throws Exception { //得到一个 指定算法密钥的密钥生成器
	 * KeyGenerator KeyGenerator keyGenerator
	 * =KeyGenerator.getInstance(MAC_NAME); //生成一个密钥 SecretKey secretKey
	 * =keyGenerator.generateKey(); return null; }
	 */

	/**
	 * 使用 HMAC-SHA1 签名方法对对encryptText进行签名
	 * 
	 * @param encryptText
	 *            被签名的字符串
	 * @param encryptKey
	 *            密钥
	 * @return
	 * @throws Exception
	 */
	public static byte[] HmacSHA1Encrypt(String encryptText, String encryptKey)
			throws Exception {
		byte[] data = encryptKey.getBytes(ENCODING);
		// 根据给定的字节数组构造一个密钥,第二参数指定一个密钥算法的名称
		SecretKey secretKey = new SecretKeySpec(data, MAC_NAME);
		// 生成一个指定 Mac 算法 的 Mac 对象
		Mac mac = Mac.getInstance(MAC_NAME);
		// 用给定密钥初始化 Mac 对象
		mac.init(secretKey);

		byte[] text = encryptText.getBytes(ENCODING);
		// 完成 Mac 操作
		return mac.doFinal(text);
	}

	public static String getHMACSHA1(String str, String key) {
		byte[] bs = null;
		;
		try {
			bs = HmacSHA1Encrypt(str, key);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String rtnStr = bytesToHexString(bs);
		return rtnStr;
	}

}
